
tp_microcontroleurs_amalraj_mariam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007578  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007700  08007700  00008700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007750  08007750  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007750  08007750  00008750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007758  08007758  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007758  08007758  00008758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800775c  0800775c  0000875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007760  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000006c  080077cc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080077cc  000094e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ad  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9d  00000000  00000000  0001c949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d75  00000000  00000000  00020638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284de  00000000  00000000  000213ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165cb  00000000  00000000  0004988b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1474  00000000  00000000  0005fe56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001512ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd0  00000000  00000000  00151310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b1  00000000  00000000  001560e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076e8 	.word	0x080076e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080076e8 	.word	0x080076e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MCP23S17_Init>:
#include "MCP_functions.h"

extern SPI_HandleTypeDef hspi3;

void MCP23S17_Init(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	@ 0x80
 80004c0:	4808      	ldr	r0, [pc, #32]	@ (80004e4 <MCP23S17_Init+0x2c>)
 80004c2:	f001 fd37 	bl	8001f34 <HAL_GPIO_WritePin>
    MCP23S17_Write(0x00, 0x00);
 80004c6:	2100      	movs	r1, #0
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 f80d 	bl	80004e8 <MCP23S17_Write>
    MCP23S17_Write(0x01, 0x00);
 80004ce:	2100      	movs	r1, #0
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 f809 	bl	80004e8 <MCP23S17_Write>
    HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <MCP23S17_Init+0x2c>)
 80004dc:	f001 fd2a 	bl	8001f34 <HAL_GPIO_WritePin>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	48000400 	.word	0x48000400

080004e8 <MCP23S17_Write>:

void MCP23S17_Write(uint8_t reg, uint8_t value) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
    uint8_t data[3] = {0x40, reg, value};
 80004f8:	2340      	movs	r3, #64	@ 0x40
 80004fa:	733b      	strb	r3, [r7, #12]
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	737b      	strb	r3, [r7, #13]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <MCP23S17_Write+0x48>)
 800050a:	f001 fd13 	bl	8001f34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, data, sizeof(data), HAL_MAX_DELAY);
 800050e:	f107 010c 	add.w	r1, r7, #12
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	2203      	movs	r2, #3
 8000518:	4806      	ldr	r0, [pc, #24]	@ (8000534 <MCP23S17_Write+0x4c>)
 800051a:	f005 fbb2 	bl	8005c82 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	4803      	ldr	r0, [pc, #12]	@ (8000530 <MCP23S17_Write+0x48>)
 8000524:	f001 fd06 	bl	8001f34 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48000400 	.word	0x48000400
 8000534:	20000274 	.word	0x20000274

08000538 <LED_Init>:

static uint8_t reg_GPIOA = 0x12;
static uint8_t reg_GPIOB = 0x13;

// Fonction pour initialiser une LED
void LED_Init(LED *leds) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    // Initialisation des LEDs sur GPIOA et GPIOB
    for (int i = 0; i < 16; i++) {
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e035      	b.n	80005b2 <LED_Init+0x7a>
        if (i < 8) {
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2b07      	cmp	r3, #7
 800054a:	dc12      	bgt.n	8000572 <LED_Init+0x3a>
            leds[i].reg = reg_GPIOA;   // LEDs sur GPIOA
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	4613      	mov	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4413      	add	r3, r2
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	4a1f      	ldr	r2, [pc, #124]	@ (80005d8 <LED_Init+0xa0>)
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	701a      	strb	r2, [r3, #0]
            leds[i].pin = i;
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	705a      	strb	r2, [r3, #1]
 8000570:	e014      	b.n	800059c <LED_Init+0x64>
        } else {
            leds[i].reg = reg_GPIOB;   // LEDs sur GPIOB
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	4613      	mov	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4413      	add	r3, r2
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a17      	ldr	r2, [pc, #92]	@ (80005dc <LED_Init+0xa4>)
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	701a      	strb	r2, [r3, #0]
            leds[i].pin = i - 8;       // Pins 0 à 7
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	b2d9      	uxtb	r1, r3
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	f1a1 0208 	sub.w	r2, r1, #8
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	705a      	strb	r2, [r3, #1]
        }
        leds[i].state = FALSE; // Par défaut, les LEDs sont éteintes
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < 16; i++) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	ddc6      	ble.n	8000546 <LED_Init+0xe>
    }

    // Éteindre toutes les LEDs
    MCP23S17_Write(reg_GPIOA, 0xFF); // GPIOA toutes éteintes
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <LED_Init+0xa0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	21ff      	movs	r1, #255	@ 0xff
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff92 	bl	80004e8 <MCP23S17_Write>
    MCP23S17_Write(reg_GPIOB, 0xFF); // GPIOB toutes éteintes
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <LED_Init+0xa4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	21ff      	movs	r1, #255	@ 0xff
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff8c 	bl	80004e8 <MCP23S17_Write>
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000001 	.word	0x20000001

080005e0 <chenillard>:
	} else {
		LED_Off(led);
	}
}

void chenillard(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	uint8_t iA=0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
	uint8_t iB=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71bb      	strb	r3, [r7, #6]

	MCP23S17_Write(reg_GPIOA, 0xFF);
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <chenillard+0xa0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	21ff      	movs	r1, #255	@ 0xff
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff77 	bl	80004e8 <MCP23S17_Write>
	MCP23S17_Write(reg_GPIOB, 0xff);
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <chenillard+0xa4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	21ff      	movs	r1, #255	@ 0xff
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff71 	bl	80004e8 <MCP23S17_Write>

	for(iB=0;iB<8;iB++){
 8000606:	2300      	movs	r3, #0
 8000608:	71bb      	strb	r3, [r7, #6]
 800060a:	e012      	b.n	8000632 <chenillard+0x52>
		MCP23S17_Write(reg_GPIOB, ~(1<<iB));
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <chenillard+0xa4>)
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2101      	movs	r1, #1
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4619      	mov	r1, r3
 8000620:	4610      	mov	r0, r2
 8000622:	f7ff ff61 	bl	80004e8 <MCP23S17_Write>
		HAL_Delay(100);
 8000626:	2064      	movs	r0, #100	@ 0x64
 8000628:	f000 ff2e 	bl	8001488 <HAL_Delay>
	for(iB=0;iB<8;iB++){
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	3301      	adds	r3, #1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b07      	cmp	r3, #7
 8000636:	d9e9      	bls.n	800060c <chenillard+0x2c>
	}
	MCP23S17_Write(reg_GPIOB, 0xff);
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <chenillard+0xa4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	21ff      	movs	r1, #255	@ 0xff
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff52 	bl	80004e8 <MCP23S17_Write>

	for(iA=0;iA<8;iA++){
 8000644:	2300      	movs	r3, #0
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	e012      	b.n	8000670 <chenillard+0x90>
		MCP23S17_Write(reg_GPIOA, ~(1<<iA));
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <chenillard+0xa0>)
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2101      	movs	r1, #1
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	43db      	mvns	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	4610      	mov	r0, r2
 8000660:	f7ff ff42 	bl	80004e8 <MCP23S17_Write>
		HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	@ 0x64
 8000666:	f000 ff0f 	bl	8001488 <HAL_Delay>
	for(iA=0;iA<8;iA++){
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3301      	adds	r3, #1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b07      	cmp	r3, #7
 8000674:	d9e9      	bls.n	800064a <chenillard+0x6a>
	}
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	20000001 	.word	0x20000001

08000688 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// minicom -D /dev/ttyACM0
// Pour quitter : ctrl+a puis q
int __io_putchar(int chr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	4803      	ldr	r0, [pc, #12]	@ (80006a8 <__io_putchar+0x20>)
 800069a:	f005 fe1b 	bl	80062d4 <HAL_UART_Transmit>
	return chr;
 800069e:	687b      	ldr	r3, [r7, #4]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200002d8 	.word	0x200002d8

080006ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0a2      	sub	sp, #136	@ 0x88
 80006b0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006b2:	f000 fe6d 	bl	8001390 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b6:	f000 f857 	bl	8000768 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006ba:	f000 f8a6 	bl	800080a <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006be:	f000 fa03 	bl	8000ac8 <MX_GPIO_Init>
	MX_DMA_Init();
 80006c2:	f000 f9db 	bl	8000a7c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80006c6:	f000 f9a9 	bl	8000a1c <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80006ca:	f000 f969 	bl	80009a0 <MX_SPI3_Init>
	MX_I2C2_Init();
 80006ce:	f000 f8c7 	bl	8000860 <MX_I2C2_Init>
	MX_SAI2_Init();
 80006d2:	f000 f905 	bl	80008e0 <MX_SAI2_Init>

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <main+0xa8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <main+0xa8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80006e4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN 2 */

	printf("DEBUT\r\n");
 80006e6:	481c      	ldr	r0, [pc, #112]	@ (8000758 <main+0xac>)
 80006e8:	f006 fc6a 	bl	8006fc0 <puts>
	SGTL5000_Init(&hi2c2);
 80006ec:	481b      	ldr	r0, [pc, #108]	@ (800075c <main+0xb0>)
 80006ee:	f000 fa95 	bl	8000c1c <SGTL5000_Init>
	MCP23S17_Init();
 80006f2:	f7ff fee1 	bl	80004b8 <MCP23S17_Init>
	LED_Init(leds);
 80006f6:	481a      	ldr	r0, [pc, #104]	@ (8000760 <main+0xb4>)
 80006f8:	f7ff ff1e 	bl	8000538 <LED_Init>

	uint16_t audioRxBuffer[32]; // Buffer pour la réception audio
	uint16_t audioTxBuffer[32]; // Buffer pour la transmission audio


	for (int i = 0 ; i < 32 ; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000702:	e012      	b.n	800072a <main+0x7e>
		{
			audioTxBuffer[i] = i * (0xFFFF/32);
 8000704:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000708:	b29b      	uxth	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	02d2      	lsls	r2, r2, #11
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	b29a      	uxth	r2, r3
 8000712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	3388      	adds	r3, #136	@ 0x88
 800071a:	443b      	add	r3, r7
 800071c:	f823 2c84 	strh.w	r2, [r3, #-132]
	for (int i = 0 ; i < 32 ; i++)
 8000720:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000724:	3301      	adds	r3, #1
 8000726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800072e:	2b1f      	cmp	r3, #31
 8000730:	dde8      	ble.n	8000704 <main+0x58>
		}


	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)audioRxBuffer, 32);
 8000732:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000736:	2220      	movs	r2, #32
 8000738:	4619      	mov	r1, r3
 800073a:	480a      	ldr	r0, [pc, #40]	@ (8000764 <main+0xb8>)
 800073c:	f004 fd1a 	bl	8005174 <HAL_SAI_Receive_DMA>
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)audioTxBuffer, 32);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	4619      	mov	r1, r3
 8000746:	4803      	ldr	r0, [pc, #12]	@ (8000754 <main+0xa8>)
 8000748:	f004 fc64 	bl	8005014 <HAL_SAI_Transmit_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		chenillard();
 800074c:	f7ff ff48 	bl	80005e0 <chenillard>
 8000750:	e7fc      	b.n	800074c <main+0xa0>
 8000752:	bf00      	nop
 8000754:	200000dc 	.word	0x200000dc
 8000758:	08007700 	.word	0x08007700
 800075c:	20000088 	.word	0x20000088
 8000760:	20000360 	.word	0x20000360
 8000764:	20000160 	.word	0x20000160

08000768 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	@ 0x58
 800076c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2244      	movs	r2, #68	@ 0x44
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f006 fd02 	bl	8007180 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078e:	f002 f8c7 	bl	8002920 <HAL_PWREx_ControlVoltageScaling>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000798:	f000 fa18 	bl	8000bcc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2310      	movs	r3, #16
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80007b6:	230a      	movs	r3, #10
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 f8fe 	bl	80029cc <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007d6:	f000 f9f9 	bl	8000bcc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fcc6 	bl	8003184 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80007fe:	f000 f9e5 	bl	8000bcc <Error_Handler>
	}
}
 8000802:	bf00      	nop
 8000804:	3758      	adds	r7, #88	@ 0x58
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b0a2      	sub	sp, #136	@ 0x88
 800080e:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2288      	movs	r2, #136	@ 0x88
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f006 fcb2 	bl	8007180 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000822:	2300      	movs	r3, #0
 8000824:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 800082e:	230d      	movs	r3, #13
 8000830:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000832:	2311      	movs	r3, #17
 8000834:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800083e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000842:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fec0 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000852:	f000 f9bb 	bl	8000bcc <Error_Handler>
	}
}
 8000856:	bf00      	nop
 8000858:	3788      	adds	r7, #136	@ 0x88
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <MX_I2C2_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10D19CE4;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <MX_I2C2_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089a:	480e      	ldr	r0, [pc, #56]	@ (80008d4 <MX_I2C2_Init+0x74>)
 800089c:	f001 fb62 	bl	8001f64 <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80008a6:	f000 f991 	bl	8000bcc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <MX_I2C2_Init+0x74>)
 80008ae:	f001 ff91 	bl	80027d4 <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80008b8:	f000 f988 	bl	8000bcc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_I2C2_Init+0x74>)
 80008c0:	f001 ffd3 	bl	800286a <HAL_I2CEx_ConfigDigitalFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80008ca:	f000 f97f 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000088 	.word	0x20000088
 80008d8:	40005800 	.word	0x40005800
 80008dc:	10d19ce4 	.word	0x10d19ce4

080008e0 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80008e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_SAI2_Init+0xb0>)
 80008e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000994 <MX_SAI2_Init+0xb4>)
 80008e8:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80008ea:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <MX_SAI2_Init+0xb0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80008f0:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_SAI2_Init+0xb0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008f6:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <MX_SAI2_Init+0xb0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_SAI2_Init+0xb0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_SAI2_Init+0xb0>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_SAI2_Init+0xb0>)
 800090a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800090e:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_SAI2_Init+0xb0>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_SAI2_Init+0xb0>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_SAI2_Init+0xb0>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_SAI2_Init+0xb0>)
 8000924:	2200      	movs	r2, #0
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000928:	2302      	movs	r3, #2
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <MX_SAI2_Init+0xb0>)
 8000930:	f004 f966 	bl	8004c00 <HAL_SAI_InitProtocol>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_SAI2_Init+0x5e>
	{
		Error_Handler();
 800093a:	f000 f947 	bl	8000bcc <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_SAI2_Init+0xb8>)
 8000940:	4a16      	ldr	r2, [pc, #88]	@ (800099c <MX_SAI2_Init+0xbc>)
 8000942:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_SAI2_Init+0xb8>)
 8000946:	2203      	movs	r2, #3
 8000948:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_SAI2_Init+0xb8>)
 800094c:	2201      	movs	r2, #1
 800094e:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_SAI2_Init+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_SAI2_Init+0xb8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_SAI2_Init+0xb8>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <MX_SAI2_Init+0xb8>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000968:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_SAI2_Init+0xb8>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_SAI2_Init+0xb8>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000974:	2302      	movs	r3, #2
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	4807      	ldr	r0, [pc, #28]	@ (8000998 <MX_SAI2_Init+0xb8>)
 800097c:	f004 f940 	bl	8004c00 <HAL_SAI_InitProtocol>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SAI2_Init+0xaa>
	{
		Error_Handler();
 8000986:	f000 f921 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000dc 	.word	0x200000dc
 8000994:	40015804 	.word	0x40015804
 8000998:	20000160 	.word	0x20000160
 800099c:	40015824 	.word	0x40015824

080009a0 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a18 <MX_SPI3_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009b0:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009be:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d2:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009d6:	2220      	movs	r2, #32
 80009d8:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009ee:	2207      	movs	r2, #7
 80009f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_SPI3_Init+0x74>)
 80009fa:	2208      	movs	r2, #8
 80009fc:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_SPI3_Init+0x74>)
 8000a00:	f005 f89c 	bl	8005b3c <HAL_SPI_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 8000a0a:	f000 f8df 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000274 	.word	0x20000274
 8000a18:	40003c00 	.word	0x40003c00

08000a1c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <MX_USART2_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a60:	f005 fbea 	bl	8006238 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000a6a:	f000 f8af 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200002d8 	.word	0x200002d8
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_DMA_Init+0x48>)
 8000a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <MX_DMA_Init+0x48>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <MX_DMA_Init+0x48>)
 8000a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2010      	movs	r0, #16
 8000aa0:	f000 fdf1 	bl	8001686 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000aa4:	2010      	movs	r0, #16
 8000aa6:	f000 fe0a 	bl	80016be <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2011      	movs	r0, #17
 8000ab0:	f000 fde9 	bl	8001686 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ab4:	2011      	movs	r0, #17
 8000ab6:	f000 fe02 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b38      	ldr	r3, [pc, #224]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a37      	ldr	r2, [pc, #220]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b35      	ldr	r3, [pc, #212]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	4b32      	ldr	r3, [pc, #200]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a31      	ldr	r2, [pc, #196]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a25      	ldr	r2, [pc, #148]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <MX_GPIO_Init+0xf8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(VU_nRESET_GPIO_Port, VU_nRESET_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2101      	movs	r1, #1
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f001 f9f5 	bl	8001f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f001 f9ef 	bl	8001f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <MX_GPIO_Init+0xfc>)
 8000b5c:	f001 f9ea 	bl	8001f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4814      	ldr	r0, [pc, #80]	@ (8000bc8 <MX_GPIO_Init+0x100>)
 8000b78:	f001 f832 	bl	8001be0 <HAL_GPIO_Init>

	/*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
	GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000b7c:	2321      	movs	r3, #33	@ 0x21
 8000b7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f001 f823 	bl	8001be0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VU_nCS_Pin */
	GPIO_InitStruct.Pin = VU_nCS_Pin;
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_GPIO_Init+0xfc>)
 8000bb2:	f001 f815 	bl	8001be0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800

08000bcc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <SGTL5000_WriteRegister>:
#include "sgtl5000.h"


void SGTL5000_WriteRegister(I2C_HandleTypeDef *hi2c, uint16_t reg, uint16_t value) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	803b      	strh	r3, [r7, #0]
    uint8_t data[2];
    data[0] = (uint8_t)(value >> 8);
 8000be8:	883b      	ldrh	r3, [r7, #0]
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(value & 0xFF);
 8000bf2:	883b      	ldrh	r3, [r7, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Mem_Write(hi2c, SGTL5000_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_16BIT, data, 2, HAL_MAX_DELAY);
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2302      	movs	r3, #2
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	2114      	movs	r1, #20
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f001 fa44 	bl	800209c <HAL_I2C_Mem_Write>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <SGTL5000_Init>:


void SGTL5000_Init(I2C_HandleTypeDef *hi2c) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    SGTL5000_WriteRegister(hi2c, CHIP_ANA_POWER, 0x4260);
 8000c24:	f244 2260 	movw	r2, #16992	@ 0x4260
 8000c28:	2130      	movs	r1, #48	@ 0x30
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffd4 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_LINREG_CTRL, 0x006C);
 8000c30:	226c      	movs	r2, #108	@ 0x6c
 8000c32:	2126      	movs	r1, #38	@ 0x26
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffcf 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_REF_CTRL, 0x01FF);
 8000c3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000c3e:	2128      	movs	r1, #40	@ 0x28
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffc9 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_LINE_OUT_CTRL, 0x031E);
 8000c46:	f240 321e 	movw	r2, #798	@ 0x31e
 8000c4a:	212c      	movs	r1, #44	@ 0x2c
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffc3 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_SHORT_CTRL, 0x1106);
 8000c52:	f241 1206 	movw	r2, #4358	@ 0x1106
 8000c56:	213c      	movs	r1, #60	@ 0x3c
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ffbd 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_ANA_CTRL, 0x0004);
 8000c5e:	2204      	movs	r2, #4
 8000c60:	2124      	movs	r1, #36	@ 0x24
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffb8 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_ANA_POWER, 0x6AFF);
 8000c68:	f646 22ff 	movw	r2, #27391	@ 0x6aff
 8000c6c:	2130      	movs	r1, #48	@ 0x30
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb2 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_DIG_POWER, 0x0073);
 8000c74:	2273      	movs	r2, #115	@ 0x73
 8000c76:	2102      	movs	r1, #2
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffad 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_LINE_OUT_VOL, 0x1111);
 8000c7e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8000c82:	212e      	movs	r1, #46	@ 0x2e
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffa7 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_CLK_CTRL, 0x0004);
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_I2S_CTRL, 0x0130);
 8000c94:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000c98:	2106      	movs	r1, #6
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff9c 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_ADCDAC_CTRL, 0x0000);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	210e      	movs	r1, #14
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff97 	bl	8000bd8 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(hi2c, CHIP_DAC_VOL, 0x3C3C);
 8000caa:	f643 423c 	movw	r2, #15420	@ 0x3c3c
 8000cae:	2110      	movs	r1, #16
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff91 	bl	8000bd8 <SGTL5000_WriteRegister>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2288      	movs	r2, #136	@ 0x88
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 fa29 	bl	8007180 <memset>
  if(hi2c->Instance==I2C2)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a25      	ldr	r2, [pc, #148]	@ (8000dc8 <HAL_I2C_MspInit+0xc0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d143      	bne.n	8000dc0 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d38:	2380      	movs	r3, #128	@ 0x80
 8000d3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 fc41 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d50:	f7ff ff3c 	bl	8000bcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d58:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d86:	2304      	movs	r3, #4
 8000d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d90:	4619      	mov	r1, r3
 8000d92:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d94:	f000 ff24 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <HAL_I2C_MspInit+0xc4>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2021      	movs	r0, #33	@ 0x21
 8000db6:	f000 fc66 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000dba:	2021      	movs	r0, #33	@ 0x21
 8000dbc:	f000 fc7f 	bl	80016be <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000dc0:	bf00      	nop
 8000dc2:	37b0      	adds	r7, #176	@ 0xb0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005800 	.word	0x40005800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <HAL_SPI_MspInit+0xb4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d144      	bne.n	8000e80 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	4a24      	ldr	r2, [pc, #144]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e02:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	4a1e      	ldr	r2, [pc, #120]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_SPI_MspInit+0xb8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e50:	2306      	movs	r3, #6
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <HAL_SPI_MspInit+0xbc>)
 8000e5c:	f000 fec0 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e60:	2320      	movs	r3, #32
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e70:	2306      	movs	r3, #6
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <HAL_SPI_MspInit+0xc0>)
 8000e7c:	f000 feb0 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40003c00 	.word	0x40003c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000400 	.word	0x48000400

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2288      	movs	r2, #136	@ 0x88
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 f961 	bl	8007180 <memset>
  if(huart->Instance==USART2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a21      	ldr	r2, [pc, #132]	@ (8000f48 <HAL_UART_MspInit+0xb0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d13b      	bne.n	8000f40 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fb79 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee0:	f7ff fe74 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_UART_MspInit+0xb4>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee8:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <HAL_UART_MspInit+0xb4>)
 8000eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_UART_MspInit+0xb4>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <HAL_UART_MspInit+0xb4>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <HAL_UART_MspInit+0xb4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_UART_MspInit+0xb4>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f14:	230c      	movs	r3, #12
 8000f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f000 fe50 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f40:	bf00      	nop
 8000f42:	37b0      	adds	r7, #176	@ 0xb0
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a64      	ldr	r2, [pc, #400]	@ (80010f0 <HAL_SAI_MspInit+0x1a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d15e      	bne.n	8001020 <HAL_SAI_MspInit+0xd0>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000f62:	4b64      	ldr	r3, [pc, #400]	@ (80010f4 <HAL_SAI_MspInit+0x1a4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d113      	bne.n	8000f92 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f6a:	4b63      	ldr	r3, [pc, #396]	@ (80010f8 <HAL_SAI_MspInit+0x1a8>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	4a62      	ldr	r2, [pc, #392]	@ (80010f8 <HAL_SAI_MspInit+0x1a8>)
 8000f70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f76:	4b60      	ldr	r3, [pc, #384]	@ (80010f8 <HAL_SAI_MspInit+0x1a8>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	204b      	movs	r0, #75	@ 0x4b
 8000f88:	f000 fb7d 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f8c:	204b      	movs	r0, #75	@ 0x4b
 8000f8e:	f000 fb96 	bl	80016be <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000f92:	4b58      	ldr	r3, [pc, #352]	@ (80010f4 <HAL_SAI_MspInit+0x1a4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a56      	ldr	r2, [pc, #344]	@ (80010f4 <HAL_SAI_MspInit+0x1a4>)
 8000f9a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f9c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000fae:	230d      	movs	r3, #13
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4850      	ldr	r0, [pc, #320]	@ (80010fc <HAL_SAI_MspInit+0x1ac>)
 8000fba:	f000 fe11 	bl	8001be0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000fbe:	4b50      	ldr	r3, [pc, #320]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fc0:	4a50      	ldr	r2, [pc, #320]	@ (8001104 <HAL_SAI_MspInit+0x1b4>)
 8000fc2:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fca:	4b4d      	ldr	r3, [pc, #308]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fcc:	2210      	movs	r2, #16
 8000fce:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fd8:	2280      	movs	r2, #128	@ 0x80
 8000fda:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fdc:	4b48      	ldr	r3, [pc, #288]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fe4:	4b46      	ldr	r3, [pc, #280]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fea:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000fec:	4b44      	ldr	r3, [pc, #272]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000fee:	2220      	movs	r2, #32
 8000ff0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000ff2:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ff8:	4841      	ldr	r0, [pc, #260]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8000ffa:	f000 fb7b 	bl	80016f4 <HAL_DMA_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001004:	f7ff fde2 	bl	8000bcc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3d      	ldr	r2, [pc, #244]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 800100c:	671a      	str	r2, [r3, #112]	@ 0x70
 800100e:	4a3c      	ldr	r2, [pc, #240]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a3a      	ldr	r2, [pc, #232]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 8001018:	66da      	str	r2, [r3, #108]	@ 0x6c
 800101a:	4a39      	ldr	r2, [pc, #228]	@ (8001100 <HAL_SAI_MspInit+0x1b0>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6293      	str	r3, [r2, #40]	@ 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a38      	ldr	r2, [pc, #224]	@ (8001108 <HAL_SAI_MspInit+0x1b8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d15e      	bne.n	80010e8 <HAL_SAI_MspInit+0x198>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800102a:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <HAL_SAI_MspInit+0x1a4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d113      	bne.n	800105a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001032:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <HAL_SAI_MspInit+0x1a8>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	4a30      	ldr	r2, [pc, #192]	@ (80010f8 <HAL_SAI_MspInit+0x1a8>)
 8001038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800103c:	6613      	str	r3, [r2, #96]	@ 0x60
 800103e:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <HAL_SAI_MspInit+0x1a8>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	204b      	movs	r0, #75	@ 0x4b
 8001050:	f000 fb19 	bl	8001686 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001054:	204b      	movs	r0, #75	@ 0x4b
 8001056:	f000 fb32 	bl	80016be <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 800105a:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <HAL_SAI_MspInit+0x1a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	4a24      	ldr	r2, [pc, #144]	@ (80010f4 <HAL_SAI_MspInit+0x1a4>)
 8001062:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001076:	230d      	movs	r3, #13
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4822      	ldr	r0, [pc, #136]	@ (800110c <HAL_SAI_MspInit+0x1bc>)
 8001082:	f000 fdad 	bl	8001be0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 8001088:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <HAL_SAI_MspInit+0x1c4>)
 800108a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 800108c:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 800108e:	2201      	movs	r2, #1
 8001090:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001098:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010b2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010b6:	2220      	movs	r2, #32
 80010b8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010c2:	f000 fb17 	bl	80016f4 <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 80010cc:	f7ff fd7e 	bl	8000bcc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80010d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80010e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_SAI_MspInit+0x1c0>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40015804 	.word	0x40015804
 80010f4:	20000390 	.word	0x20000390
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000400 	.word	0x48000400
 8001100:	200001e4 	.word	0x200001e4
 8001104:	4002006c 	.word	0x4002006c
 8001108:	40015824 	.word	0x40015824
 800110c:	48000800 	.word	0x48000800
 8001110:	2000022c 	.word	0x2000022c
 8001114:	40020080 	.word	0x40020080

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <NMI_Handler+0x4>

08001120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MemManage_Handler+0x4>

08001130 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <UsageFault_Handler+0x4>

08001140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116e:	f000 f96b 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <DMA1_Channel6_IRQHandler+0x10>)
 800117e:	f000 fc50 	bl	8001a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001e4 	.word	0x200001e4

0800118c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <DMA1_Channel7_IRQHandler+0x10>)
 8001192:	f000 fc46 	bl	8001a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000022c 	.word	0x2000022c

080011a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <I2C2_EV_IRQHandler+0x10>)
 80011a6:	f001 f88d 	bl	80022c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000088 	.word	0x20000088

080011b4 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <SAI2_IRQHandler+0x14>)
 80011ba:	f004 f869 	bl	8005290 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <SAI2_IRQHandler+0x18>)
 80011c0:	f004 f866 	bl	8005290 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000dc 	.word	0x200000dc
 80011cc:	20000160 	.word	0x20000160

080011d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00a      	b.n	80011f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011e2:	f3af 8000 	nop.w
 80011e6:	4601      	mov	r1, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	b2ca      	uxtb	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf0      	blt.n	80011e2 <_read+0x12>
  }

  return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e009      	b.n	8001230 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fa2f 	bl	8000688 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf1      	blt.n	800121c <_write+0x12>
  }
  return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_close>:

int _close(int file)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800126a:	605a      	str	r2, [r3, #4]
  return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_isatty>:

int _isatty(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f005 ff9e 	bl	800721c <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20018000 	.word	0x20018000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000394 	.word	0x20000394
 8001314:	200004e8 	.word	0x200004e8

08001318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	@ (8001388 <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f005 ff5d 	bl	8007228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136e:	f7ff f99d 	bl	80006ac <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001380:	08007760 	.word	0x08007760
  ldr r2, =_sbss
 8001384:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001388:	200004e8 	.word	0x200004e8

0800138c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>
	...

08001390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_Init+0x3c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_Init+0x3c>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 f962 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f80f 	bl	80013d0 <HAL_InitTick>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	e001      	b.n	80013c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013be:	f7ff fc7f 	bl	8000cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_InitTick+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_InitTick+0x70>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_InitTick+0x6c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f96d 	bl	80016da <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d809      	bhi.n	8001420 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f937 	bl	8001686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_InitTick+0x74>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e007      	b.n	8001430 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e004      	b.n	8001430 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e001      	b.n	8001430 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000004 	.word	0x20000004
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000000c 	.word	0x2000000c
 800146c:	20000398 	.word	0x20000398

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000398 	.word	0x20000398

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000000c 	.word	0x2000000c

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	@ (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	@ (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	@ (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	@ 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff29 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff3e 	bl	8001518 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff8e 	bl	80015c4 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5d 	bl	8001570 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff31 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e098      	b.n	8001838 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <HAL_DMA_Init+0x150>)
 800170e:	429a      	cmp	r2, r3
 8001710:	d80f      	bhi.n	8001732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b4b      	ldr	r3, [pc, #300]	@ (8001848 <HAL_DMA_Init+0x154>)
 800171a:	4413      	add	r3, r2
 800171c:	4a4b      	ldr	r2, [pc, #300]	@ (800184c <HAL_DMA_Init+0x158>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a48      	ldr	r2, [pc, #288]	@ (8001850 <HAL_DMA_Init+0x15c>)
 800172e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001730:	e00e      	b.n	8001750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <HAL_DMA_Init+0x160>)
 800173a:	4413      	add	r3, r2
 800173c:	4a43      	ldr	r2, [pc, #268]	@ (800184c <HAL_DMA_Init+0x158>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	@ (8001858 <HAL_DMA_Init+0x164>)
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800176a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017aa:	d039      	beq.n	8001820 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	4a27      	ldr	r2, [pc, #156]	@ (8001850 <HAL_DMA_Init+0x15c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11a      	bne.n	80017ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <HAL_DMA_Init+0x168>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	210f      	movs	r1, #15
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4924      	ldr	r1, [pc, #144]	@ (800185c <HAL_DMA_Init+0x168>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_DMA_Init+0x168>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	491d      	ldr	r1, [pc, #116]	@ (800185c <HAL_DMA_Init+0x168>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
 80017ea:	e019      	b.n	8001820 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_DMA_Init+0x16c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f003 031c 	and.w	r3, r3, #28
 80017f8:	210f      	movs	r1, #15
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	4917      	ldr	r1, [pc, #92]	@ (8001860 <HAL_DMA_Init+0x16c>)
 8001802:	4013      	ands	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_DMA_Init+0x16c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 031c 	and.w	r3, r3, #28
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	4911      	ldr	r1, [pc, #68]	@ (8001860 <HAL_DMA_Init+0x16c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40020407 	.word	0x40020407
 8001848:	bffdfff8 	.word	0xbffdfff8
 800184c:	cccccccd 	.word	0xcccccccd
 8001850:	40020000 	.word	0x40020000
 8001854:	bffdfbf8 	.word	0xbffdfbf8
 8001858:	40020400 	.word	0x40020400
 800185c:	400200a8 	.word	0x400200a8
 8001860:	400204a8 	.word	0x400204a8

08001864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Start_IT+0x20>
 8001880:	2302      	movs	r3, #2
 8001882:	e04b      	b.n	800191c <HAL_DMA_Start_IT+0xb8>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d13a      	bne.n	800190e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f95f 	bl	8001b80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 020e 	orr.w	r2, r2, #14
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00f      	b.n	80018fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0204 	bic.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 020a 	orr.w	r2, r2, #10
 80018fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e005      	b.n	800191a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e022      	b.n	8001994 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020e 	bic.w	r2, r2, #14
 800195c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f003 021c 	and.w	r2, r3, #28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d005      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e029      	b.n	8001a18 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020e 	bic.w	r2, r2, #14
 80019d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e8:	f003 021c 	and.w	r2, r3, #28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
    }
  }
  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f003 031c 	and.w	r3, r3, #28
 8001a42:	2204      	movs	r2, #4
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d026      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x7a>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d021      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0204 	bic.w	r2, r2, #4
 8001a74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f003 021c 	and.w	r2, r3, #28
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	2104      	movs	r1, #4
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d071      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a9a:	e06c      	b.n	8001b76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	f003 031c 	and.w	r3, r3, #28
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d02e      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xec>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d029      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 020a 	bic.w	r2, r2, #10
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	f003 021c 	and.w	r2, r3, #28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2102      	movs	r1, #2
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d038      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b0c:	e033      	b.n	8001b76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f003 031c 	and.w	r3, r3, #28
 8001b16:	2208      	movs	r2, #8
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02a      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x156>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d025      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 020e 	bic.w	r2, r2, #14
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	f003 021c 	and.w	r2, r3, #28
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
}
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f003 021c 	and.w	r2, r3, #28
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d108      	bne.n	8001bc4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc2:	e007      	b.n	8001bd4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e17f      	b.n	8001ef0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8171 	beq.w	8001eea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d005      	beq.n	8001c20 <HAL_GPIO_Init+0x40>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d130      	bne.n	8001c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c56:	2201      	movs	r2, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 0201 	and.w	r2, r3, #1
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d118      	bne.n	8001cc0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	6939      	ldr	r1, [r7, #16]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80ac 	beq.w	8001eea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b5f      	ldr	r3, [pc, #380]	@ (8001f10 <HAL_GPIO_Init+0x330>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	4a5e      	ldr	r2, [pc, #376]	@ (8001f10 <HAL_GPIO_Init+0x330>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f10 <HAL_GPIO_Init+0x330>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001daa:	4a5a      	ldr	r2, [pc, #360]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dd4:	d025      	beq.n	8001e22 <HAL_GPIO_Init+0x242>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f18 <HAL_GPIO_Init+0x338>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <HAL_GPIO_Init+0x23e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4e      	ldr	r2, [pc, #312]	@ (8001f1c <HAL_GPIO_Init+0x33c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x23a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	@ (8001f20 <HAL_GPIO_Init+0x340>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x236>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4c      	ldr	r2, [pc, #304]	@ (8001f24 <HAL_GPIO_Init+0x344>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x232>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4b      	ldr	r2, [pc, #300]	@ (8001f28 <HAL_GPIO_Init+0x348>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x22e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4a      	ldr	r2, [pc, #296]	@ (8001f2c <HAL_GPIO_Init+0x34c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x22a>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00c      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00a      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e0e:	2305      	movs	r3, #5
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e22:	2300      	movs	r3, #0
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e34:	4937      	ldr	r1, [pc, #220]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e42:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e66:	4a32      	ldr	r2, [pc, #200]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e6c:	4b30      	ldr	r3, [pc, #192]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e90:	4a27      	ldr	r2, [pc, #156]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e96:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <HAL_GPIO_Init+0x350>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f47f ae78 	bne.w	8001bf0 <HAL_GPIO_Init+0x10>
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	48000c00 	.word	0x48000c00
 8001f24:	48001000 	.word	0x48001000
 8001f28:	48001400 	.word	0x48001400
 8001f2c:	48001800 	.word	0x48001800
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e08d      	b.n	8002092 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe febc 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e006      	b.n	8001fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d108      	bne.n	8002006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	e007      	b.n	8002016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69d9      	ldr	r1, [r3, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	817b      	strh	r3, [r7, #10]
 80020ae:	460b      	mov	r3, r1
 80020b0:	813b      	strh	r3, [r7, #8]
 80020b2:	4613      	mov	r3, r2
 80020b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b20      	cmp	r3, #32
 80020c0:	f040 80f9 	bne.w	80022b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x34>
 80020ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0ed      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_I2C_Mem_Write+0x4e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0e6      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020f2:	f7ff f9bd 	bl	8001470 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2319      	movs	r3, #25
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f96f 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0d1      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2221      	movs	r2, #33	@ 0x21
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800213c:	88f8      	ldrh	r0, [r7, #6]
 800213e:	893a      	ldrh	r2, [r7, #8]
 8002140:	8979      	ldrh	r1, [r7, #10]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4603      	mov	r3, r0
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f8d3 	bl	80022f8 <I2C_RequestMemoryWrite>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0a9      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	2bff      	cmp	r3, #255	@ 0xff
 800216c:	d90e      	bls.n	800218c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	22ff      	movs	r2, #255	@ 0xff
 8002172:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	b2da      	uxtb	r2, r3
 800217a:	8979      	ldrh	r1, [r7, #10]
 800217c:	2300      	movs	r3, #0
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 faf3 	bl	8002770 <I2C_TransferConfig>
 800218a:	e00f      	b.n	80021ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219a:	b2da      	uxtb	r2, r3
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	2300      	movs	r3, #0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fae2 	bl	8002770 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f972 	bl	800249a <I2C_WaitOnTXISFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e07b      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d034      	beq.n	8002264 <HAL_I2C_Mem_Write+0x1c8>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d130      	bne.n	8002264 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	@ 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f8eb 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e04d      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	@ 0xff
 8002224:	d90e      	bls.n	8002244 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	@ 0xff
 800222a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa97 	bl	8002770 <I2C_TransferConfig>
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002252:	b2da      	uxtb	r2, r3
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa86 	bl	8002770 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d19e      	bne.n	80021ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f958 	bl	8002528 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e01a      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_I2C_Mem_Write+0x224>)
 8002296:	400b      	ands	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	fe00e800 	.word	0xfe00e800

080022c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
  }
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	817b      	strh	r3, [r7, #10]
 800230a:	460b      	mov	r3, r1
 800230c:	813b      	strh	r3, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	8979      	ldrh	r1, [r7, #10]
 8002318:	4b20      	ldr	r3, [pc, #128]	@ (800239c <I2C_RequestMemoryWrite+0xa4>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa25 	bl	8002770 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f8b5 	bl	800249a <I2C_WaitOnTXISFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e02c      	b.n	8002394 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	629a      	str	r2, [r3, #40]	@ 0x28
 800234a:	e015      	b.n	8002378 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800234c:	893b      	ldrh	r3, [r7, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	69b9      	ldr	r1, [r7, #24]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f89b 	bl	800249a <I2C_WaitOnTXISFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e012      	b.n	8002394 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800236e:	893b      	ldrh	r3, [r7, #8]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2200      	movs	r2, #0
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f830 	bl	80023e8 <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	80002000 	.word	0x80002000

080023a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d103      	bne.n	80023be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d007      	beq.n	80023dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	619a      	str	r2, [r3, #24]
  }
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f8:	e03b      	b.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f8d6 	bl	80025b0 <I2C_IsErrorOccurred>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e041      	b.n	8002492 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d02d      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7ff f82b 	bl	8001470 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d122      	bne.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d113      	bne.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4013      	ands	r3, r2
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	429a      	cmp	r2, r3
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	429a      	cmp	r2, r3
 800248e:	d0b4      	beq.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a6:	e033      	b.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f87f 	bl	80025b0 <I2C_IsErrorOccurred>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e031      	b.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d025      	beq.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c4:	f7fe ffd4 	bl	8001470 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11a      	bne.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d013      	beq.n	8002510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d1c4      	bne.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002534:	e02f      	b.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f838 	bl	80025b0 <I2C_IsErrorOccurred>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02d      	b.n	80025a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe ff91 	bl	8001470 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11a      	bne.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b20      	cmp	r3, #32
 800256c:	d013      	beq.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d1c8      	bne.n	8002536 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d068      	beq.n	80026ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025e4:	e049      	b.n	800267a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d045      	beq.n	800267a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7fe ff3f 	bl	8001470 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_IsErrorOccurred+0x54>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d13a      	bne.n	800267a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002616:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002626:	d121      	bne.n	800266c <I2C_IsErrorOccurred+0xbc>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800262e:	d01d      	beq.n	800266c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b20      	cmp	r3, #32
 8002634:	d01a      	beq.n	800266c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002644:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002646:	f7fe ff13 	bl	8001470 <HAL_GetTick>
 800264a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264c:	e00e      	b.n	800266c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800264e:	f7fe ff0f 	bl	8001470 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b19      	cmp	r3, #25
 800265a:	d907      	bls.n	800266c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f043 0320 	orr.w	r3, r3, #32
 8002662:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800266a:	e006      	b.n	800267a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d1e9      	bne.n	800264e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b20      	cmp	r3, #32
 8002686:	d003      	beq.n	8002690 <I2C_IsErrorOccurred+0xe0>
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0aa      	beq.n	80025e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002694:	2b00      	cmp	r3, #0
 8002696:	d103      	bne.n	80026a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800271c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff fe3b 	bl	80023a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <I2C_IsErrorOccurred+0x1bc>)
 8002736:	400b      	ands	r3, r1
 8002738:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800275e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002762:	4618      	mov	r0, r3
 8002764:	3728      	adds	r7, #40	@ 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	817b      	strh	r3, [r7, #10]
 800277e:	4613      	mov	r3, r2
 8002780:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002790:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	4313      	orrs	r3, r2
 800279a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800279e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <I2C_TransferConfig+0x60>)
 80027b0:	430b      	orrs	r3, r1
 80027b2:	43db      	mvns	r3, r3
 80027b4:	ea02 0103 	and.w	r1, r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	03ff63ff 	.word	0x03ff63ff

080027d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d138      	bne.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e032      	b.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	@ 0x24
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d139      	bne.n	80028f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800288a:	2302      	movs	r3, #2
 800288c:	e033      	b.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2224      	movs	r2, #36	@ 0x24
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002908:	4b04      	ldr	r3, [pc, #16]	@ (800291c <HAL_PWREx_GetVoltageRange+0x18>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40007000 	.word	0x40007000

08002920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800292e:	d130      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800293c:	d038      	beq.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002946:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800294e:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2232      	movs	r2, #50	@ 0x32
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	4a1b      	ldr	r2, [pc, #108]	@ (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	3301      	adds	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002964:	e002      	b.n	800296c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3b01      	subs	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002978:	d102      	bne.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f2      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298c:	d110      	bne.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e00f      	b.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d007      	beq.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a8:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000
 80029c4:	20000004 	.word	0x20000004
 80029c8:	431bde83 	.word	0x431bde83

080029cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e3ca      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4b97      	ldr	r3, [pc, #604]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e8:	4b94      	ldr	r3, [pc, #592]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80e4 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_RCC_OscConfig+0x4a>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	f040 808b 	bne.w	8002b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 8087 	bne.w	8002b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a16:	4b89      	ldr	r3, [pc, #548]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3a2      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	4b82      	ldr	r3, [pc, #520]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCC_OscConfig+0x7c>
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a46:	e005      	b.n	8002a54 <HAL_RCC_OscConfig+0x88>
 8002a48:	4b7c      	ldr	r3, [pc, #496]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d223      	bcs.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd55 	bl	800350c <RCC_SetFlashLatencyFromMSIRange>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e383      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6c:	4b73      	ldr	r3, [pc, #460]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a72      	ldr	r2, [pc, #456]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b70      	ldr	r3, [pc, #448]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	496d      	ldr	r1, [pc, #436]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	4968      	ldr	r1, [pc, #416]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	e025      	b.n	8002aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	4b66      	ldr	r3, [pc, #408]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a65      	ldr	r2, [pc, #404]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b63      	ldr	r3, [pc, #396]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4960      	ldr	r1, [pc, #384]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	4b5f      	ldr	r3, [pc, #380]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	495b      	ldr	r1, [pc, #364]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fd15 	bl	800350c <RCC_SetFlashLatencyFromMSIRange>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e343      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aec:	f000 fc4a 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b52      	ldr	r3, [pc, #328]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	4950      	ldr	r1, [pc, #320]	@ (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	4a4e      	ldr	r2, [pc, #312]	@ (8002c44 <HAL_RCC_OscConfig+0x278>)
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c48 <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fc5d 	bl	80013d0 <HAL_InitTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d052      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	e327      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d032      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2c:	4b43      	ldr	r3, [pc, #268]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fc9a 	bl	8001470 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b40:	f7fe fc96 	bl	8001470 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e310      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b52:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a36      	ldr	r2, [pc, #216]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b64:	f043 0308 	orr.w	r3, r3, #8
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4931      	ldr	r1, [pc, #196]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	492c      	ldr	r1, [pc, #176]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e01a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b92:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a29      	ldr	r2, [pc, #164]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fc67 	bl	8001470 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fc63 	bl	8001470 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e2dd      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb8:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1da>
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d074      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x21a>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d064      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d160      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e2ba      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x24a>
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e026      	b.n	8002c64 <HAL_RCC_OscConfig+0x298>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCC_OscConfig+0x280>
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a02      	ldr	r2, [pc, #8]	@ (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x298>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08007708 	.word	0x08007708
 8002c44:	20000004 	.word	0x20000004
 8002c48:	20000008 	.word	0x20000008
 8002c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a9f      	ldr	r2, [pc, #636]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b9d      	ldr	r3, [pc, #628]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fc00 	bl	8001470 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fbfc 	bl	8001470 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e276      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	4b92      	ldr	r3, [pc, #584]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2a8>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fbec 	bl	8001470 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fbe8 	bl	8001470 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	@ 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e262      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	4b88      	ldr	r3, [pc, #544]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2d0>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x310>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d116      	bne.n	8002d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x328>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e23f      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b76      	ldr	r3, [pc, #472]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	4973      	ldr	r1, [pc, #460]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	e040      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d12:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fba7 	bl	8001470 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fba3 	bl	8001470 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e21d      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	4b65      	ldr	r3, [pc, #404]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b62      	ldr	r3, [pc, #392]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	495f      	ldr	r1, [pc, #380]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fb83 	bl	8001470 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fb7f 	bl	8001470 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1f9      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d03c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01c      	beq.n	8002dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fb5e 	bl	8001470 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fb5a 	bl	8001470 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1d4      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dca:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3ec>
 8002dd8:	e01b      	b.n	8002e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dda:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fb41 	bl	8001470 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fb3d 	bl	8001470 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1b7      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	4b32      	ldr	r3, [pc, #200]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80a6 	beq.w	8002f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	4a26      	ldr	r2, [pc, #152]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d118      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fb04 	bl	8001470 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7fe fb00 	bl	8001470 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e17a      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RCC_OscConfig+0x508>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4d8>
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea2:	e029      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d115      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x50c>
 8002eac:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	4a07      	ldr	r2, [pc, #28]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ebc:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	4a03      	ldr	r2, [pc, #12]	@ (8002ed0 <HAL_RCC_OscConfig+0x504>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ecc:	e014      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a9b      	ldr	r2, [pc, #620]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee8:	4b98      	ldr	r3, [pc, #608]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	4a97      	ldr	r2, [pc, #604]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d016      	beq.n	8002f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fab6 	bl	8001470 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fab2 	bl	8001470 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e12a      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ed      	beq.n	8002f08 <HAL_RCC_OscConfig+0x53c>
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fa9f 	bl	8001470 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fa9b 	bl	8001470 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e113      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ed      	bne.n	8002f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b7a      	ldr	r3, [pc, #488]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	4a79      	ldr	r2, [pc, #484]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80fe 	beq.w	8003172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	f040 80d0 	bne.w	8003120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f80:	4b72      	ldr	r3, [pc, #456]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d130      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d127      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fc0:	2a07      	cmp	r2, #7
 8002fc2:	bf14      	ite	ne
 8002fc4:	2201      	movne	r2, #1
 8002fc6:	2200      	moveq	r2, #0
 8002fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d113      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d06e      	beq.n	80030d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d069      	beq.n	80030d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ffc:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003008:	4b50      	ldr	r3, [pc, #320]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0ad      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003018:	4b4c      	ldr	r3, [pc, #304]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4b      	ldr	r2, [pc, #300]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003024:	f7fe fa24 	bl	8001470 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fa20 	bl	8001470 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e09a      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303e:	4b43      	ldr	r3, [pc, #268]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	4b40      	ldr	r3, [pc, #256]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	4b40      	ldr	r3, [pc, #256]	@ (8003150 <HAL_RCC_OscConfig+0x784>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800305a:	3a01      	subs	r2, #1
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003064:	0212      	lsls	r2, r2, #8
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	0552      	lsls	r2, r2, #21
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	3a01      	subs	r2, #1
 800307c:	0652      	lsls	r2, r2, #25
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003084:	0912      	lsrs	r2, r2, #4
 8003086:	0452      	lsls	r2, r2, #17
 8003088:	430a      	orrs	r2, r1
 800308a:	4930      	ldr	r1, [pc, #192]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003090:	4b2e      	ldr	r3, [pc, #184]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800309c:	4b2b      	ldr	r3, [pc, #172]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a8:	f7fe f9e2 	bl	8001470 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe f9de 	bl	8001470 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e058      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	4b22      	ldr	r3, [pc, #136]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ce:	e050      	b.n	8003172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04f      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d4:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d148      	bne.n	8003172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030e0:	4b1a      	ldr	r3, [pc, #104]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b17      	ldr	r3, [pc, #92]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a16      	ldr	r2, [pc, #88]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f8:	f7fe f9ba 	bl	8001470 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe f9b6 	bl	8001470 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e030      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x734>
 800311e:	e028      	b.n	8003172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d023      	beq.n	800316e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a08      	ldr	r2, [pc, #32]	@ (800314c <HAL_RCC_OscConfig+0x780>)
 800312c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe f99d 	bl	8001470 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003138:	e00c      	b.n	8003154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe f999 	bl	8001470 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d905      	bls.n	8003154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e013      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
 800314c:	40021000 	.word	0x40021000
 8003150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCC_OscConfig+0x7b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ec      	bne.n	800313a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCC_OscConfig+0x7b0>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4905      	ldr	r1, [pc, #20]	@ (800317c <HAL_RCC_OscConfig+0x7b0>)
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_OscConfig+0x7b4>)
 8003168:	4013      	ands	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
 800316c:	e001      	b.n	8003172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	feeefffc 	.word	0xfeeefffc

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0e7      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4970      	ldr	r1, [pc, #448]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cf      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d908      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4960      	ldr	r1, [pc, #384]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04c      	beq.n	800329c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	4b5a      	ldr	r3, [pc, #360]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0a6      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4b54      	ldr	r3, [pc, #336]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d115      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e09a      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800323a:	4b4e      	ldr	r3, [pc, #312]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e08e      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e086      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b46      	ldr	r3, [pc, #280]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4943      	ldr	r1, [pc, #268]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe f900 	bl	8001470 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe f8fc 	bl	8001470 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e06e      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b3a      	ldr	r3, [pc, #232]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d208      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	492b      	ldr	r1, [pc, #172]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d210      	bcs.n	80032fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0207 	bic.w	r2, r3, #7
 80032e0:	4923      	ldr	r1, [pc, #140]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	4b21      	ldr	r3, [pc, #132]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e036      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4918      	ldr	r1, [pc, #96]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4910      	ldr	r1, [pc, #64]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003338:	f000 f824 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	490b      	ldr	r1, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x1f4>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
 8003354:	4a09      	ldr	r2, [pc, #36]	@ (800337c <HAL_RCC_ClockConfig+0x1f8>)
 8003356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1fc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe f837 	bl	80013d0 <HAL_InitTick>
 8003362:	4603      	mov	r3, r0
 8003364:	72fb      	strb	r3, [r7, #11]

  return status;
 8003366:	7afb      	ldrb	r3, [r7, #11]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40022000 	.word	0x40022000
 8003374:	40021000 	.word	0x40021000
 8003378:	08007708 	.word	0x08007708
 800337c:	20000004 	.word	0x20000004
 8003380:	20000008 	.word	0x20000008

08003384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003392:	4b3e      	ldr	r3, [pc, #248]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339c:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x34>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d121      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d11e      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033b8:	4b34      	ldr	r3, [pc, #208]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033c4:	4b31      	ldr	r3, [pc, #196]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e005      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033d4:	4b2d      	ldr	r3, [pc, #180]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033fc:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x110>)
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	e004      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d101      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003408:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x114>)
 800340a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d134      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003412:	4b1e      	ldr	r3, [pc, #120]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0xa6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xac>
 8003428:	e005      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800342a:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x110>)
 800342c:	617b      	str	r3, [r7, #20]
      break;
 800342e:	e005      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003430:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x114>)
 8003432:	617b      	str	r3, [r7, #20]
      break;
 8003434:	e002      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	617b      	str	r3, [r7, #20]
      break;
 800343a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800343c:	4b13      	ldr	r3, [pc, #76]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	3301      	adds	r3, #1
 8003448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800344a:	4b10      	ldr	r3, [pc, #64]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	fb03 f202 	mul.w	r2, r3, r2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	0e5b      	lsrs	r3, r3, #25
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	3301      	adds	r3, #1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800347c:	69bb      	ldr	r3, [r7, #24]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	08007720 	.word	0x08007720
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	08007718 	.word	0x08007718

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034e4:	f7ff ffda 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0adb      	lsrs	r3, r3, #11
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4904      	ldr	r1, [pc, #16]	@ (8003508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	08007718 	.word	0x08007718

0800350c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003518:	4b2a      	ldr	r3, [pc, #168]	@ (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003524:	f7ff f9ee 	bl	8002904 <HAL_PWREx_GetVoltageRange>
 8003528:	6178      	str	r0, [r7, #20]
 800352a:	e014      	b.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800352c:	4b25      	ldr	r3, [pc, #148]	@ (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	4a24      	ldr	r2, [pc, #144]	@ (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003536:	6593      	str	r3, [r2, #88]	@ 0x58
 8003538:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f9de 	bl	8002904 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b1e      	ldr	r3, [pc, #120]	@ (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800355c:	d10b      	bne.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b80      	cmp	r3, #128	@ 0x80
 8003562:	d919      	bls.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2ba0      	cmp	r3, #160	@ 0xa0
 8003568:	d902      	bls.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800356a:	2302      	movs	r3, #2
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e013      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003570:	2301      	movs	r3, #1
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e010      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	d902      	bls.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800357c:	2303      	movs	r3, #3
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e00a      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b80      	cmp	r3, #128	@ 0x80
 8003586:	d102      	bne.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003588:	2302      	movs	r3, #2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e004      	b.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b70      	cmp	r3, #112	@ 0x70
 8003592:	d101      	bne.n	8003598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003594:	2301      	movs	r3, #1
 8003596:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 0207 	bic.w	r2, r3, #7
 80035a0:	4909      	ldr	r1, [pc, #36]	@ (80035c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035a8:	4b07      	ldr	r3, [pc, #28]	@ (80035c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40022000 	.word	0x40022000

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035d8:	2300      	movs	r3, #0
 80035da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d041      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035f0:	d02a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035f6:	d824      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035fc:	d008      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003602:	d81e      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800360c:	d010      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800360e:	e018      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003610:	4b86      	ldr	r3, [pc, #536]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a85      	ldr	r2, [pc, #532]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800361c:	e015      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f001 f829 	bl	800467c <RCCEx_PLLSAI1_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362e:	e00c      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3320      	adds	r3, #32
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f914 	bl	8004864 <RCCEx_PLLSAI2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	74fb      	strb	r3, [r7, #19]
      break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003650:	4b76      	ldr	r3, [pc, #472]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800365e:	4973      	ldr	r1, [pc, #460]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003666:	e001      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d041      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800367c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003680:	d02a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003682:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003686:	d824      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003688:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800368c:	d008      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800368e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003692:	d81e      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800369c:	d010      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369e:	e018      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036a0:	4b62      	ldr	r3, [pc, #392]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a61      	ldr	r2, [pc, #388]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ac:	e015      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 ffe1 	bl	800467c <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036be:	e00c      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3320      	adds	r3, #32
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f8cc 	bl	8004864 <RCCEx_PLLSAI2_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	74fb      	strb	r3, [r7, #19]
      break;
 80036d6:	e000      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036e0:	4b52      	ldr	r3, [pc, #328]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ee:	494f      	ldr	r1, [pc, #316]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036f6:	e001      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a0 	beq.w	800384a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800370e:	4b47      	ldr	r3, [pc, #284]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	4b41      	ldr	r3, [pc, #260]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	4a40      	ldr	r2, [pc, #256]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003730:	4b3e      	ldr	r3, [pc, #248]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373c:	2301      	movs	r3, #1
 800373e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003740:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800374c:	f7fd fe90 	bl	8001470 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003752:	e009      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003754:	f7fd fe8c 	bl	8001470 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	74fb      	strb	r3, [r7, #19]
        break;
 8003766:	e005      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003768:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d15c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800377a:	4b2c      	ldr	r3, [pc, #176]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003784:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	d019      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003798:	4b24      	ldr	r3, [pc, #144]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a4:	4b21      	ldr	r3, [pc, #132]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a20      	ldr	r2, [pc, #128]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c4:	4a19      	ldr	r2, [pc, #100]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd fe4b 	bl	8001470 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037dc:	e00b      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd fe47 	bl	8001470 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d902      	bls.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	74fb      	strb	r3, [r7, #19]
            break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ec      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800381a:	4904      	ldr	r1, [pc, #16]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7c7b      	ldrb	r3, [r7, #17]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	4a9d      	ldr	r2, [pc, #628]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003856:	4b98      	ldr	r3, [pc, #608]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	4994      	ldr	r1, [pc, #592]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003878:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	f023 020c 	bic.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	498c      	ldr	r1, [pc, #560]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800389a:	4b87      	ldr	r3, [pc, #540]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	4983      	ldr	r1, [pc, #524]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038bc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	497b      	ldr	r1, [pc, #492]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038de:	4b76      	ldr	r3, [pc, #472]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ec:	4972      	ldr	r1, [pc, #456]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003900:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	496a      	ldr	r1, [pc, #424]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003922:	4b65      	ldr	r3, [pc, #404]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	4961      	ldr	r1, [pc, #388]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003944:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003952:	4959      	ldr	r1, [pc, #356]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003966:	4b54      	ldr	r3, [pc, #336]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003974:	4950      	ldr	r1, [pc, #320]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003988:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003996:	4948      	ldr	r1, [pc, #288]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039aa:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	493f      	ldr	r1, [pc, #252]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d028      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039cc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	4937      	ldr	r1, [pc, #220]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039ea:	d106      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ec:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a31      	ldr	r2, [pc, #196]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f6:	60d3      	str	r3, [r2, #12]
 80039f8:	e011      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fe36 	bl	800467c <RCCEx_PLLSAI1_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d028      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a2a:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	491f      	ldr	r1, [pc, #124]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a54:	60d3      	str	r3, [r2, #12]
 8003a56:	e011      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fe07 	bl	800467c <RCCEx_PLLSAI1_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	4908      	ldr	r1, [pc, #32]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aa6:	d109      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a02      	ldr	r2, [pc, #8]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
 8003ab4:	e014      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fdd5 	bl	800467c <RCCEx_PLLSAI1_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02f      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aec:	4b2b      	ldr	r3, [pc, #172]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003afa:	4928      	ldr	r1, [pc, #160]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b0a:	d10d      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fdb2 	bl	800467c <RCCEx_PLLSAI1_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d014      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	74bb      	strb	r3, [r7, #18]
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3320      	adds	r3, #32
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fe93 	bl	8004864 <RCCEx_PLLSAI2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b58:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b66:	490d      	ldr	r1, [pc, #52]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b8a:	4904      	ldr	r1, [pc, #16]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb2:	d13e      	bne.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003bb4:	4bb2      	ldr	r3, [pc, #712]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbe:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bce:	f200 8542 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be0:	d00e      	beq.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003be2:	f000 bd38 	b.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003be6:	4ba6      	ldr	r3, [pc, #664]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	f040 8532 	bne.w	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfa:	61fb      	str	r3, [r7, #28]
      break;
 8003bfc:	f000 bd2d 	b.w	800465a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003c00:	4b9f      	ldr	r3, [pc, #636]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f040 8527 	bne.w	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003c10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003c14:	61fb      	str	r3, [r7, #28]
      break;
 8003c16:	f000 bd22 	b.w	800465e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c1a:	4b99      	ldr	r3, [pc, #612]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c26:	f040 851c 	bne.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003c2a:	4b96      	ldr	r3, [pc, #600]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003c2c:	61fb      	str	r3, [r7, #28]
      break;
 8003c2e:	f000 bd18 	b.w	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c32:	4b93      	ldr	r3, [pc, #588]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d036      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d840      	bhi.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d020      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003c54:	e039      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c56:	4b8a      	ldr	r3, [pc, #552]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d116      	bne.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c62:	4b87      	ldr	r3, [pc, #540]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003c6e:	4b84      	ldr	r3, [pc, #528]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003c7a:	4b81      	ldr	r3, [pc, #516]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4a80      	ldr	r2, [pc, #512]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003c8e:	e01f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61bb      	str	r3, [r7, #24]
      break;
 8003c94:	e01c      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c96:	4b7a      	ldr	r3, [pc, #488]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca2:	d102      	bne.n	8003caa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003ca4:	4b79      	ldr	r3, [pc, #484]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003ca6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ca8:	e012      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
      break;
 8003cae:	e00f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cb0:	4b73      	ldr	r3, [pc, #460]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003cbe:	4b74      	ldr	r3, [pc, #464]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
      break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
      break;
 8003cce:	bf00      	nop
    }

    switch(PeriphClk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cd6:	f000 80dd 	beq.w	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ce0:	f200 84c1 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cea:	f000 80d3 	beq.w	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cf4:	f200 84b7 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfe:	f000 835f 	beq.w	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d08:	f200 84ad 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d12:	f000 847e 	beq.w	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d1c:	f200 84a3 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d26:	f000 82cd 	beq.w	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d30:	f200 8499 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d3a:	f000 80ab 	beq.w	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d44:	f200 848f 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4e:	f000 8090 	beq.w	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d58:	f200 8485 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d62:	d07f      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6a:	f200 847c 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d74:	f000 8403 	beq.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7e:	f200 8472 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	f000 83af 	beq.w	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d92:	f200 8468 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9c:	f000 8379 	beq.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da6:	f200 845e 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	f000 8344 	beq.w	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b80      	cmp	r3, #128	@ 0x80
 8003db6:	f200 8456 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d84b      	bhi.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 844f 	beq.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	2b1f      	cmp	r3, #31
 8003dce:	f200 844a 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003fc1 	.word	0x08003fc1
 8003ddc:	0800402f 	.word	0x0800402f
 8003de0:	08004667 	.word	0x08004667
 8003de4:	080040c3 	.word	0x080040c3
 8003de8:	08004667 	.word	0x08004667
 8003dec:	08004667 	.word	0x08004667
 8003df0:	08004667 	.word	0x08004667
 8003df4:	08004149 	.word	0x08004149
 8003df8:	08004667 	.word	0x08004667
 8003dfc:	08004667 	.word	0x08004667
 8003e00:	08004667 	.word	0x08004667
 8003e04:	08004667 	.word	0x08004667
 8003e08:	08004667 	.word	0x08004667
 8003e0c:	08004667 	.word	0x08004667
 8003e10:	08004667 	.word	0x08004667
 8003e14:	080041c1 	.word	0x080041c1
 8003e18:	08004667 	.word	0x08004667
 8003e1c:	08004667 	.word	0x08004667
 8003e20:	08004667 	.word	0x08004667
 8003e24:	08004667 	.word	0x08004667
 8003e28:	08004667 	.word	0x08004667
 8003e2c:	08004667 	.word	0x08004667
 8003e30:	08004667 	.word	0x08004667
 8003e34:	08004667 	.word	0x08004667
 8003e38:	08004667 	.word	0x08004667
 8003e3c:	08004667 	.word	0x08004667
 8003e40:	08004667 	.word	0x08004667
 8003e44:	08004667 	.word	0x08004667
 8003e48:	08004667 	.word	0x08004667
 8003e4c:	08004667 	.word	0x08004667
 8003e50:	08004667 	.word	0x08004667
 8003e54:	08004243 	.word	0x08004243
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	f000 82c1 	beq.w	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003e60:	f000 bc01 	b.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003e64:	69b9      	ldr	r1, [r7, #24]
 8003e66:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003e6a:	f000 fdd9 	bl	8004a20 <RCCEx_GetSAIxPeriphCLKFreq>
 8003e6e:	61f8      	str	r0, [r7, #28]
      break;
 8003e70:	e3fa      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003e72:	69b9      	ldr	r1, [r7, #24]
 8003e74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003e78:	f000 fdd2 	bl	8004a20 <RCCEx_GetSAIxPeriphCLKFreq>
 8003e7c:	61f8      	str	r0, [r7, #28]
      break;
 8003e7e:	e3f3      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003e80:	40021000 	.word	0x40021000
 8003e84:	0003d090 	.word	0x0003d090
 8003e88:	08007720 	.word	0x08007720
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003e94:	4ba9      	ldr	r3, [pc, #676]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003eae:	d87f      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eb6:	d04e      	beq.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003ec0:	e076      	b.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d172      	bne.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003ece:	4b9b      	ldr	r3, [pc, #620]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003eda:	4b98      	ldr	r3, [pc, #608]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003ee6:	4b95      	ldr	r3, [pc, #596]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	4a93      	ldr	r2, [pc, #588]	@ (8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef8:	61fb      	str	r3, [r7, #28]
          break;
 8003efa:	e05b      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003efc:	4b8f      	ldr	r3, [pc, #572]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f08:	d156      	bne.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003f0a:	4b8c      	ldr	r3, [pc, #560]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f16:	d14f      	bne.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f18:	4b88      	ldr	r3, [pc, #544]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f22:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	fb03 f202 	mul.w	r2, r3, r2
 8003f2c:	4b83      	ldr	r3, [pc, #524]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	3301      	adds	r3, #1
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	0d5b      	lsrs	r3, r3, #21
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
          break;
 8003f54:	e030      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003f56:	4b79      	ldr	r3, [pc, #484]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f62:	d12b      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003f64:	4b75      	ldr	r3, [pc, #468]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f70:	d124      	bne.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003f72:	4b72      	ldr	r3, [pc, #456]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f7c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	fb03 f202 	mul.w	r2, r3, r2
 8003f86:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	3301      	adds	r3, #1
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003f98:	4b68      	ldr	r3, [pc, #416]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	0d5b      	lsrs	r3, r3, #21
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	61fb      	str	r3, [r7, #28]
          break;
 8003fae:	e005      	b.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003fb0:	bf00      	nop
 8003fb2:	e359      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fb4:	bf00      	nop
 8003fb6:	e357      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fb8:	bf00      	nop
 8003fba:	e355      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fbc:	bf00      	nop
        break;
 8003fbe:	e353      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d827      	bhi.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ff1 	.word	0x08003ff1
 8003fe0:	08003ff9 	.word	0x08003ff9
 8003fe4:	0800400d 	.word	0x0800400d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7ff fa7a 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8003fec:	61f8      	str	r0, [r7, #28]
          break;
 8003fee:	e01d      	b.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ff0:	f7ff f9c8 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8003ff4:	61f8      	str	r0, [r7, #28]
          break;
 8003ff6:	e019      	b.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ff8:	4b50      	ldr	r3, [pc, #320]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004004:	d10f      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004006:	4b4f      	ldr	r3, [pc, #316]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004008:	61fb      	str	r3, [r7, #28]
          break;
 800400a:	e00c      	b.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800400c:	4b4b      	ldr	r3, [pc, #300]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d107      	bne.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800401a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800401e:	61fb      	str	r3, [r7, #28]
          break;
 8004020:	e003      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004022:	bf00      	nop
 8004024:	e320      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004026:	bf00      	nop
 8004028:	e31e      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800402a:	bf00      	nop
        break;
 800402c:	e31c      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d83a      	bhi.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004040:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	080040b7 	.word	0x080040b7
 8004050:	080040b7 	.word	0x080040b7
 8004054:	080040b7 	.word	0x080040b7
 8004058:	08004085 	.word	0x08004085
 800405c:	080040b7 	.word	0x080040b7
 8004060:	080040b7 	.word	0x080040b7
 8004064:	080040b7 	.word	0x080040b7
 8004068:	0800408d 	.word	0x0800408d
 800406c:	080040b7 	.word	0x080040b7
 8004070:	080040b7 	.word	0x080040b7
 8004074:	080040b7 	.word	0x080040b7
 8004078:	080040a1 	.word	0x080040a1
          frequency = HAL_RCC_GetPCLK1Freq();
 800407c:	f7ff fa1a 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004080:	61f8      	str	r0, [r7, #28]
          break;
 8004082:	e01d      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004084:	f7ff f97e 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004088:	61f8      	str	r0, [r7, #28]
          break;
 800408a:	e019      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004098:	d10f      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800409a:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800409c:	61fb      	str	r3, [r7, #28]
          break;
 800409e:	e00c      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040a0:	4b26      	ldr	r3, [pc, #152]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d107      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b2:	61fb      	str	r3, [r7, #28]
          break;
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80040b6:	bf00      	nop
 80040b8:	e2d6      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040ba:	bf00      	nop
 80040bc:	e2d4      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040be:	bf00      	nop
        break;
 80040c0:	e2d2      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80040c2:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b30      	cmp	r3, #48	@ 0x30
 80040d2:	d021      	beq.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b30      	cmp	r3, #48	@ 0x30
 80040d8:	d829      	bhi.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d011      	beq.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d823      	bhi.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d004      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80040f2:	e01c      	b.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7ff f9de 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80040f8:	61f8      	str	r0, [r7, #28]
          break;
 80040fa:	e01d      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80040fc:	f7ff f942 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004100:	61f8      	str	r0, [r7, #28]
          break;
 8004102:	e019      	b.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004104:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d10f      	bne.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004112:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004114:	61fb      	str	r3, [r7, #28]
          break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004118:	4b08      	ldr	r3, [pc, #32]	@ (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412a:	61fb      	str	r3, [r7, #28]
          break;
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800412e:	bf00      	nop
 8004130:	e29a      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004132:	bf00      	nop
 8004134:	e298      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004136:	bf00      	nop
        break;
 8004138:	e296      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	08007720 	.word	0x08007720
 8004144:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004148:	4b9b      	ldr	r3, [pc, #620]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2bc0      	cmp	r3, #192	@ 0xc0
 8004158:	d021      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2bc0      	cmp	r3, #192	@ 0xc0
 800415e:	d829      	bhi.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b80      	cmp	r3, #128	@ 0x80
 8004164:	d011      	beq.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b80      	cmp	r3, #128	@ 0x80
 800416a:	d823      	bhi.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d004      	beq.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004178:	e01c      	b.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800417a:	f7ff f99b 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 800417e:	61f8      	str	r0, [r7, #28]
          break;
 8004180:	e01d      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004182:	f7ff f8ff 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004186:	61f8      	str	r0, [r7, #28]
          break;
 8004188:	e019      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800418a:	4b8b      	ldr	r3, [pc, #556]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004196:	d10f      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004198:	4b88      	ldr	r3, [pc, #544]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800419a:	61fb      	str	r3, [r7, #28]
          break;
 800419c:	e00c      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800419e:	4b86      	ldr	r3, [pc, #536]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80041ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b0:	61fb      	str	r3, [r7, #28]
          break;
 80041b2:	e003      	b.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80041b4:	bf00      	nop
 80041b6:	e257      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041b8:	bf00      	nop
 80041ba:	e255      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041bc:	bf00      	nop
        break;
 80041be:	e253      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80041c0:	4b7d      	ldr	r3, [pc, #500]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041d2:	d025      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041da:	d82c      	bhi.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e2:	d013      	beq.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ea:	d824      	bhi.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f8:	d004      	beq.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80041fa:	e01c      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7ff f95a 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004200:	61f8      	str	r0, [r7, #28]
          break;
 8004202:	e01d      	b.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004204:	f7ff f8be 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004208:	61f8      	str	r0, [r7, #28]
          break;
 800420a:	e019      	b.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800420c:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004218:	d10f      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800421a:	4b68      	ldr	r3, [pc, #416]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800421c:	61fb      	str	r3, [r7, #28]
          break;
 800421e:	e00c      	b.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004220:	4b65      	ldr	r3, [pc, #404]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d107      	bne.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	61fb      	str	r3, [r7, #28]
          break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004236:	bf00      	nop
 8004238:	e216      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800423a:	bf00      	nop
 800423c:	e214      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800423e:	bf00      	nop
        break;
 8004240:	e212      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004242:	4b5d      	ldr	r3, [pc, #372]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004254:	d025      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800425c:	d82c      	bhi.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004264:	d013      	beq.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426c:	d824      	bhi.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427a:	d004      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800427c:	e01c      	b.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800427e:	f7ff f919 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004282:	61f8      	str	r0, [r7, #28]
          break;
 8004284:	e01d      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004286:	f7ff f87d 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800428a:	61f8      	str	r0, [r7, #28]
          break;
 800428c:	e019      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800428e:	4b4a      	ldr	r3, [pc, #296]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429a:	d10f      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800429c:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800429e:	61fb      	str	r3, [r7, #28]
          break;
 80042a0:	e00c      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042a2:	4b45      	ldr	r3, [pc, #276]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d107      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80042b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042b4:	61fb      	str	r3, [r7, #28]
          break;
 80042b6:	e003      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80042b8:	bf00      	nop
 80042ba:	e1d5      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042bc:	bf00      	nop
 80042be:	e1d3      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042c0:	bf00      	nop
        break;
 80042c2:	e1d1      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80042c4:	4b3c      	ldr	r3, [pc, #240]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042d6:	d00c      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042de:	d864      	bhi.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ee:	d030      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80042f0:	e05b      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80042f2:	f7ff f847 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 80042f6:	61f8      	str	r0, [r7, #28]
          break;
 80042f8:	e05c      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80042fa:	4b2f      	ldr	r3, [pc, #188]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004306:	d152      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004308:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d04c      	beq.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004314:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800431e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	fb03 f202 	mul.w	r2, r3, r2
 8004328:	4b23      	ldr	r3, [pc, #140]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	3301      	adds	r3, #1
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800433a:	4b1f      	ldr	r3, [pc, #124]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	0e5b      	lsrs	r3, r3, #25
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	3301      	adds	r3, #1
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	fbb2 f3f3 	udiv	r3, r2, r3
 800434e:	61fb      	str	r3, [r7, #28]
          break;
 8004350:	e02d      	b.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004352:	4b19      	ldr	r3, [pc, #100]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800435a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800435e:	d128      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800436c:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004376:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	fb03 f202 	mul.w	r2, r3, r2
 8004380:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	3301      	adds	r3, #1
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004392:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	0e5b      	lsrs	r3, r3, #25
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	3301      	adds	r3, #1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	61fb      	str	r3, [r7, #28]
          break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80043aa:	bf00      	nop
 80043ac:	e15c      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ae:	bf00      	nop
 80043b0:	e15a      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043b2:	bf00      	nop
        break;
 80043b4:	e158      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80043c0:	4b9d      	ldr	r3, [pc, #628]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043ca:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80043d2:	f7ff f885 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 80043d6:	61f8      	str	r0, [r7, #28]
        break;
 80043d8:	e146      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80043da:	f7fe ffd3 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 80043de:	61f8      	str	r0, [r7, #28]
        break;
 80043e0:	e142      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80043e2:	4b95      	ldr	r3, [pc, #596]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f4:	d013      	beq.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fc:	d819      	bhi.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440a:	d004      	beq.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800440c:	e011      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800440e:	f7ff f851 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004412:	61f8      	str	r0, [r7, #28]
          break;
 8004414:	e010      	b.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe ffb5 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800441a:	61f8      	str	r0, [r7, #28]
          break;
 800441c:	e00c      	b.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800441e:	4b86      	ldr	r3, [pc, #536]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442a:	d104      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800442c:	4b83      	ldr	r3, [pc, #524]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800442e:	61fb      	str	r3, [r7, #28]
          break;
 8004430:	e001      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004432:	bf00      	nop
 8004434:	e118      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004436:	bf00      	nop
        break;
 8004438:	e116      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800443a:	4b7f      	ldr	r3, [pc, #508]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800444c:	d013      	beq.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004454:	d819      	bhi.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004462:	d004      	beq.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004464:	e011      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004466:	f7ff f825 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 800446a:	61f8      	str	r0, [r7, #28]
          break;
 800446c:	e010      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800446e:	f7fe ff89 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8004472:	61f8      	str	r0, [r7, #28]
          break;
 8004474:	e00c      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004476:	4b70      	ldr	r3, [pc, #448]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004482:	d104      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004484:	4b6d      	ldr	r3, [pc, #436]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004486:	61fb      	str	r3, [r7, #28]
          break;
 8004488:	e001      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800448a:	bf00      	nop
 800448c:	e0ec      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800448e:	bf00      	nop
        break;
 8004490:	e0ea      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004492:	4b69      	ldr	r3, [pc, #420]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a4:	d013      	beq.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ac:	d819      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80044bc:	e011      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe fff9 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80044c2:	61f8      	str	r0, [r7, #28]
          break;
 80044c4:	e010      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80044c6:	f7fe ff5d 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 80044ca:	61f8      	str	r0, [r7, #28]
          break;
 80044cc:	e00c      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044da:	d104      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80044dc:	4b57      	ldr	r3, [pc, #348]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80044de:	61fb      	str	r3, [r7, #28]
          break;
 80044e0:	e001      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80044e2:	bf00      	nop
 80044e4:	e0c0      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044e6:	bf00      	nop
        break;
 80044e8:	e0be      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80044ea:	4b53      	ldr	r3, [pc, #332]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044fc:	d02c      	beq.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004504:	d833      	bhi.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800450c:	d01a      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004514:	d82b      	bhi.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004522:	d004      	beq.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004524:	e023      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004526:	f7fe ffc5 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 800452a:	61f8      	str	r0, [r7, #28]
          break;
 800452c:	e026      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800452e:	4b42      	ldr	r3, [pc, #264]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	d11a      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800453c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004540:	61fb      	str	r3, [r7, #28]
          break;
 8004542:	e016      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004544:	4b3c      	ldr	r3, [pc, #240]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004550:	d111      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004552:	4b3a      	ldr	r3, [pc, #232]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004554:	61fb      	str	r3, [r7, #28]
          break;
 8004556:	e00e      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004558:	4b37      	ldr	r3, [pc, #220]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d109      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456a:	61fb      	str	r3, [r7, #28]
          break;
 800456c:	e005      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800456e:	bf00      	nop
 8004570:	e07a      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004572:	bf00      	nop
 8004574:	e078      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004576:	bf00      	nop
 8004578:	e076      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800457a:	bf00      	nop
        break;
 800457c:	e074      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800457e:	4b2e      	ldr	r3, [pc, #184]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004590:	d02c      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004598:	d833      	bhi.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045a0:	d01a      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045a8:	d82b      	bhi.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045b6:	d004      	beq.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80045b8:	e023      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ba:	f7fe ff7b 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80045be:	61f8      	str	r0, [r7, #28]
          break;
 80045c0:	e026      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80045c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d11a      	bne.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80045d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045d4:	61fb      	str	r3, [r7, #28]
          break;
 80045d6:	e016      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045d8:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e4:	d111      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80045e6:	4b15      	ldr	r3, [pc, #84]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80045e8:	61fb      	str	r3, [r7, #28]
          break;
 80045ea:	e00e      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d109      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80045fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fe:	61fb      	str	r3, [r7, #28]
          break;
 8004600:	e005      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004602:	bf00      	nop
 8004604:	e030      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004606:	bf00      	nop
 8004608:	e02e      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800460a:	bf00      	nop
 800460c:	e02c      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800460e:	bf00      	nop
        break;
 8004610:	e02a      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004612:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004618:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462a:	d009      	beq.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800462c:	e012      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800462e:	f7fe ff41 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8004632:	61f8      	str	r0, [r7, #28]
          break;
 8004634:	e00e      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464c:	d101      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800464e:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004650:	61fb      	str	r3, [r7, #28]
          break;
 8004652:	bf00      	nop
        break;
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004656:	bf00      	nop
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004666:	bf00      	nop
    }
  }

  return(frequency);
 8004668:	69fb      	ldr	r3, [r7, #28]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	00f42400 	.word	0x00f42400

0800467c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468a:	4b75      	ldr	r3, [pc, #468]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004696:	4b72      	ldr	r3, [pc, #456]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
       ||
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
       ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d047      	beq.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e044      	b.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d018      	beq.n	8004702 <RCCEx_PLLSAI1_Config+0x86>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d825      	bhi.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <RCCEx_PLLSAI1_Config+0x62>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d009      	beq.n	80046f0 <RCCEx_PLLSAI1_Config+0x74>
 80046dc:	e020      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046de:	4b60      	ldr	r3, [pc, #384]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ee:	e01a      	b.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e013      	b.n	800472a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004702:	4b57      	ldr	r3, [pc, #348]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470e:	4b54      	ldr	r3, [pc, #336]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471e:	e006      	b.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e004      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004736:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	430b      	orrs	r3, r1
 800474c:	4944      	ldr	r1, [pc, #272]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d17d      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004758:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a40      	ldr	r2, [pc, #256]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fc fe84 	bl	8001470 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476c:	f7fc fe80 	bl	8001470 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
        break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004780:	4b37      	ldr	r3, [pc, #220]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d160      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d111      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004798:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6892      	ldr	r2, [r2, #8]
 80047a8:	0211      	lsls	r1, r2, #8
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0912      	lsrs	r2, r2, #4
 80047b0:	0452      	lsls	r2, r2, #17
 80047b2:	430a      	orrs	r2, r1
 80047b4:	492a      	ldr	r1, [pc, #168]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	610b      	str	r3, [r1, #16]
 80047ba:	e027      	b.n	800480c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d112      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c2:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6892      	ldr	r2, [r2, #8]
 80047d2:	0211      	lsls	r1, r2, #8
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6912      	ldr	r2, [r2, #16]
 80047d8:	0852      	lsrs	r2, r2, #1
 80047da:	3a01      	subs	r2, #1
 80047dc:	0552      	lsls	r2, r2, #21
 80047de:	430a      	orrs	r2, r1
 80047e0:	491f      	ldr	r1, [pc, #124]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	610b      	str	r3, [r1, #16]
 80047e6:	e011      	b.n	800480c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6892      	ldr	r2, [r2, #8]
 80047f8:	0211      	lsls	r1, r2, #8
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6952      	ldr	r2, [r2, #20]
 80047fe:	0852      	lsrs	r2, r2, #1
 8004800:	3a01      	subs	r2, #1
 8004802:	0652      	lsls	r2, r2, #25
 8004804:	430a      	orrs	r2, r1
 8004806:	4916      	ldr	r1, [pc, #88]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800480c:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fc fe2a 	bl	8001470 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fc fe26 	bl	8001470 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
          break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004834:	4b0a      	ldr	r3, [pc, #40]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4904      	ldr	r1, [pc, #16]	@ (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000

08004864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004872:	4b6a      	ldr	r3, [pc, #424]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800487e:	4b67      	ldr	r3, [pc, #412]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0203 	and.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d10d      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
       ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004896:	4b61      	ldr	r3, [pc, #388]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
       ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d047      	beq.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e044      	b.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d018      	beq.n	80048ea <RCCEx_PLLSAI2_Config+0x86>
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d825      	bhi.n	8004908 <RCCEx_PLLSAI2_Config+0xa4>
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d002      	beq.n	80048c6 <RCCEx_PLLSAI2_Config+0x62>
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d009      	beq.n	80048d8 <RCCEx_PLLSAI2_Config+0x74>
 80048c4:	e020      	b.n	8004908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048c6:	4b55      	ldr	r3, [pc, #340]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11d      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d6:	e01a      	b.n	800490e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d8:	4b50      	ldr	r3, [pc, #320]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e013      	b.n	8004912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ea:	4b4c      	ldr	r3, [pc, #304]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048f6:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004906:	e006      	b.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      break;
 800490c:	e004      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490e:	bf00      	nop
 8004910:	e002      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004916:	bf00      	nop
    }

    if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800491e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	430b      	orrs	r3, r1
 8004934:	4939      	ldr	r1, [pc, #228]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d167      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004940:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fc fd90 	bl	8001470 <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004952:	e009      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004954:	f7fc fd8c 	bl	8001470 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
        break;
 8004966:	e005      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004968:	4b2c      	ldr	r3, [pc, #176]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ef      	bne.n	8004954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14a      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d111      	bne.n	80049a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004980:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	0912      	lsrs	r2, r2, #4
 8004998:	0452      	lsls	r2, r2, #17
 800499a:	430a      	orrs	r2, r1
 800499c:	491f      	ldr	r1, [pc, #124]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	614b      	str	r3, [r1, #20]
 80049a2:	e011      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049a4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	0211      	lsls	r1, r2, #8
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6912      	ldr	r2, [r2, #16]
 80049ba:	0852      	lsrs	r2, r2, #1
 80049bc:	3a01      	subs	r2, #1
 80049be:	0652      	lsls	r2, r2, #25
 80049c0:	430a      	orrs	r2, r1
 80049c2:	4916      	ldr	r1, [pc, #88]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fc fd4c 	bl	8001470 <HAL_GetTick>
 80049d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049da:	e009      	b.n	80049f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049dc:	f7fc fd48 	bl	8001470 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d902      	bls.n	80049f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
          break;
 80049ee:	e005      	b.n	80049fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4904      	ldr	r1, [pc, #16]	@ (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3c:	d10c      	bne.n	8004a58 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a44:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004a48:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a50:	d112      	bne.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a52:	4b6a      	ldr	r3, [pc, #424]	@ (8004bfc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e00f      	b.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d10b      	bne.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004a60:	4b65      	ldr	r3, [pc, #404]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a66:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a6a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a72:	d101      	bne.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004a74:	4b61      	ldr	r3, [pc, #388]	@ (8004bfc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004a76:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 80b4 	bne.w	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a8a:	d003      	beq.n	8004a94 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a92:	d135      	bne.n	8004b00 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004a94:	4b58      	ldr	r3, [pc, #352]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aa0:	f040 80a1 	bne.w	8004be6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004aa4:	4b54      	ldr	r3, [pc, #336]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 809a 	beq.w	8004be6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ab2:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	3301      	adds	r3, #1
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004ad8:	4b47      	ldr	r3, [pc, #284]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004ae4:	2311      	movs	r3, #17
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e001      	b.n	8004aee <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004aea:	2307      	movs	r3, #7
 8004aec:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	fb03 f202 	mul.w	r2, r3, r2
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004afe:	e072      	b.n	8004be6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d133      	bne.n	8004b6e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004b06:	4b3c      	ldr	r3, [pc, #240]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b12:	d169      	bne.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004b14:	4b38      	ldr	r3, [pc, #224]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d063      	beq.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b20:	4b35      	ldr	r3, [pc, #212]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b34:	4b30      	ldr	r3, [pc, #192]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004b46:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004b52:	2311      	movs	r3, #17
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e001      	b.n	8004b5c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004b58:	2307      	movs	r3, #7
 8004b5a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	fb03 f202 	mul.w	r2, r3, r2
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e03c      	b.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b74:	d003      	beq.n	8004b7e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b7c:	d134      	bne.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b8a:	d12d      	bne.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d027      	beq.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b98:	4b17      	ldr	r3, [pc, #92]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004bac:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004bca:	2311      	movs	r3, #17
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e001      	b.n	8004bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004bd0:	2307      	movs	r3, #7
 8004bd2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	fb03 f202 	mul.w	r2, r3, r2
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	e000      	b.n	8004be8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004be6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004be8:	69fb      	ldr	r3, [r7, #28]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	@ 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	001fff68 	.word	0x001fff68

08004c00 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d904      	bls.n	8004c1e <HAL_SAI_InitProtocol+0x1e>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3b03      	subs	r3, #3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d812      	bhi.n	8004c42 <HAL_SAI_InitProtocol+0x42>
 8004c1c:	e008      	b.n	8004c30 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fd09 	bl	800563c <SAI_InitI2S>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2e:	e00b      	b.n	8004c48 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fdb2 	bl	80057a0 <SAI_InitPCM>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	e002      	b.n	8004c48 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
      break;
 8004c46:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f808 	bl	8004c64 <HAL_SAI_Init>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e155      	b.n	8004f22 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc f960 	bl	8000f50 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fe3f 	bl	8005914 <SAI_Disable>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e140      	b.n	8004f22 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00c      	beq.n	8004cca <HAL_SAI_Init+0x66>
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d80d      	bhi.n	8004cd0 <HAL_SAI_Init+0x6c>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SAI_Init+0x5a>
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d003      	beq.n	8004cc4 <HAL_SAI_Init+0x60>
 8004cbc:	e008      	b.n	8004cd0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      break;
 8004cc2:	e008      	b.n	8004cd6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	61fb      	str	r3, [r7, #28]
      break;
 8004cc8:	e005      	b.n	8004cd6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004cca:	2320      	movs	r3, #32
 8004ccc:	61fb      	str	r3, [r7, #28]
      break;
 8004cce:	e002      	b.n	8004cd6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
      break;
 8004cd4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d81d      	bhi.n	8004d1a <HAL_SAI_Init+0xb6>
 8004cde:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <HAL_SAI_Init+0x80>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004cfb 	.word	0x08004cfb
 8004cec:	08004d03 	.word	0x08004d03
 8004cf0:	08004d0b 	.word	0x08004d0b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
      break;
 8004cf8:	e012      	b.n	8004d20 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cfe:	617b      	str	r3, [r7, #20]
      break;
 8004d00:	e00e      	b.n	8004d20 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d06:	617b      	str	r3, [r7, #20]
      break;
 8004d08:	e00a      	b.n	8004d20 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d0e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
      break;
 8004d18:	e002      	b.n	8004d20 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
      break;
 8004d1e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a81      	ldr	r2, [pc, #516]	@ (8004f2c <HAL_SAI_Init+0x2c8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_SAI_Init+0xd0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a80      	ldr	r2, [pc, #512]	@ (8004f30 <HAL_SAI_Init+0x2cc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d103      	bne.n	8004d3c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004d34:	4a7f      	ldr	r2, [pc, #508]	@ (8004f34 <HAL_SAI_Init+0x2d0>)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e002      	b.n	8004d42 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004d3c:	4a7e      	ldr	r2, [pc, #504]	@ (8004f38 <HAL_SAI_Init+0x2d4>)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d041      	beq.n	8004dce <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a77      	ldr	r2, [pc, #476]	@ (8004f2c <HAL_SAI_Init+0x2c8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_SAI_Init+0xfa>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a75      	ldr	r2, [pc, #468]	@ (8004f30 <HAL_SAI_Init+0x2cc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d105      	bne.n	8004d6a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004d5e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004d62:	f7fe ff1d 	bl	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d66:	6138      	str	r0, [r7, #16]
 8004d68:	e004      	b.n	8004d74 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004d6a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004d6e:	f7fe ff17 	bl	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d72:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	025b      	lsls	r3, r3, #9
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8004f3c <HAL_SAI_Init+0x2d8>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	08da      	lsrs	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	4b67      	ldr	r3, [pc, #412]	@ (8004f3c <HAL_SAI_Init+0x2d8>)
 8004d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004da2:	08da      	lsrs	r2, r3, #3
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	1aca      	subs	r2, r1, r3
 8004dae:	2a08      	cmp	r2, #8
 8004db0:	d904      	bls.n	8004dbc <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	085a      	lsrs	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_SAI_Init+0x17a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d109      	bne.n	8004df2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_SAI_Init+0x186>
 8004de6:	2300      	movs	r3, #0
 8004de8:	e001      	b.n	8004dee <HAL_SAI_Init+0x18a>
 8004dea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e008      	b.n	8004e04 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <HAL_SAI_Init+0x19c>
 8004dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dfe:	e000      	b.n	8004e02 <HAL_SAI_Init+0x19e>
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f40 <HAL_SAI_Init+0x2dc>)
 8004e10:	400b      	ands	r3, r1
 8004e12:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e28:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004e3c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e48:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	051b      	lsls	r3, r3, #20
 8004e50:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004e68:	f023 030f 	bic.w	r3, r3, #15
 8004e6c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6859      	ldr	r1, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6899      	ldr	r1, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b2b      	ldr	r3, [pc, #172]	@ (8004f44 <HAL_SAI_Init+0x2e0>)
 8004e98:	400b      	ands	r3, r1
 8004e9a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004eac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004eb2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004eb8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004ec2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68d9      	ldr	r1, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004eda:	400b      	ands	r3, r1
 8004edc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68d9      	ldr	r1, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ef4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efa:	3b01      	subs	r3, #1
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40015404 	.word	0x40015404
 8004f30:	40015424 	.word	0x40015424
 8004f34:	40015400 	.word	0x40015400
 8004f38:	40015800 	.word	0x40015800
 8004f3c:	cccccccd 	.word	0xcccccccd
 8004f40:	ff05c010 	.word	0xff05c010
 8004f44:	fff88000 	.word	0xfff88000

08004f48 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_SAI_Abort+0x1a>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e053      	b.n	800500a <HAL_SAI_Abort+0xc2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fcd2 	bl	8005914 <SAI_Disable>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f88:	d125      	bne.n	8004fd6 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004f98:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b12      	cmp	r3, #18
 8004fa4:	d108      	bne.n	8004fb8 <HAL_SAI_Abort+0x70>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc fcb6 	bl	8001924 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b22      	cmp	r3, #34	@ 0x22
 8004fc2:	d108      	bne.n	8004fd6 <HAL_SAI_Abort+0x8e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fc fca7 	bl	8001924 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe6:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0208 	orr.w	r2, r2, #8
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8005022:	f7fc fa25 	bl	8001470 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_SAI_Transmit_DMA+0x20>
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e093      	b.n	8005160 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	f040 808c 	bne.w	800515e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_SAI_Transmit_DMA+0x40>
 8005050:	2302      	movs	r3, #2
 8005052:	e085      	b.n	8005160 <HAL_SAI_Transmit_DMA+0x14c>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2212      	movs	r2, #18
 800507e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005086:	4a38      	ldr	r2, [pc, #224]	@ (8005168 <HAL_SAI_Transmit_DMA+0x154>)
 8005088:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508e:	4a37      	ldr	r2, [pc, #220]	@ (800516c <HAL_SAI_Transmit_DMA+0x158>)
 8005090:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005096:	4a36      	ldr	r2, [pc, #216]	@ (8005170 <HAL_SAI_Transmit_DMA+0x15c>)
 8005098:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800509e:	2200      	movs	r2, #0
 80050a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050aa:	4619      	mov	r1, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	331c      	adds	r3, #28
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80050ba:	f7fc fbd3 	bl	8001864 <HAL_DMA_Start_IT>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e047      	b.n	8005160 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80050d0:	2100      	movs	r1, #0
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fbe6 	bl	80058a4 <SAI_InterruptFlag>
 80050d8:	4601      	mov	r1, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80050f6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80050f8:	e015      	b.n	8005126 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80050fa:	f7fc f9b9 	bl	8001470 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005108:	d90d      	bls.n	8005126 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005110:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e01c      	b.n	8005160 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0e2      	beq.n	80050fa <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e000      	b.n	8005160 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800515e:	2302      	movs	r3, #2
  }
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	080059e7 	.word	0x080059e7
 800516c:	08005989 	.word	0x08005989
 8005170:	08005a7d 	.word	0x08005a7d

08005174 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_SAI_Receive_DMA+0x1a>
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e074      	b.n	800527c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d16d      	bne.n	800527a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_SAI_Receive_DMA+0x38>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e067      	b.n	800527c <HAL_SAI_Receive_DMA+0x108>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2222      	movs	r2, #34	@ 0x22
 80051d6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a29      	ldr	r2, [pc, #164]	@ (8005284 <HAL_SAI_Receive_DMA+0x110>)
 80051e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	4a28      	ldr	r2, [pc, #160]	@ (8005288 <HAL_SAI_Receive_DMA+0x114>)
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ee:	4a27      	ldr	r2, [pc, #156]	@ (800528c <HAL_SAI_Receive_DMA+0x118>)
 80051f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f6:	2200      	movs	r2, #0
 80051f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	331c      	adds	r3, #28
 8005204:	4619      	mov	r1, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005212:	f7fc fb27 	bl	8001864 <HAL_DMA_Start_IT>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e029      	b.n	800527c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005228:	2100      	movs	r1, #0
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fb3a 	bl	80058a4 <SAI_InterruptFlag>
 8005230:	4601      	mov	r1, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800524e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d107      	bne.n	800526e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800526c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	08005a61 	.word	0x08005a61
 8005288:	08005a03 	.word	0x08005a03
 800528c:	08005a7d 	.word	0x08005a7d

08005290 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8192 	beq.w	80055ca <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <HAL_SAI_IRQHandler+0x4c>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
 80052da:	e176      	b.n	80055ca <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01e      	beq.n	8005324 <HAL_SAI_IRQHandler+0x94>
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d019      	beq.n	8005324 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2201      	movs	r2, #1
 80052f6:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b22      	cmp	r3, #34	@ 0x22
 8005302:	d101      	bne.n	8005308 <HAL_SAI_IRQHandler+0x78>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <HAL_SAI_IRQHandler+0x7a>
 8005308:	2302      	movs	r3, #2
 800530a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f983 	bl	8005628 <HAL_SAI_ErrorCallback>
 8005322:	e152      	b.n	80055ca <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_SAI_IRQHandler+0xc2>
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00c      	beq.n	8005352 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2202      	movs	r2, #2
 800533e:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8140 	beq.w	80055ca <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534e:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005350:	e13b      	b.n	80055ca <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d055      	beq.n	8005408 <HAL_SAI_IRQHandler+0x178>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d050      	beq.n	8005408 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2220      	movs	r2, #32
 800536c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005374:	f043 0204 	orr.w	r2, r3, #4
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d038      	beq.n	80053fa <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d016      	beq.n	80053be <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005394:	4a8f      	ldr	r2, [pc, #572]	@ (80055d4 <HAL_SAI_IRQHandler+0x344>)
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800539c:	4618      	mov	r0, r3
 800539e:	f7fc faff 	bl	80019a0 <HAL_DMA_Abort_IT>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f935 	bl	8005628 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80fc 	beq.w	80055c0 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053cc:	4a81      	ldr	r2, [pc, #516]	@ (80055d4 <HAL_SAI_IRQHandler+0x344>)
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fc fae3 	bl	80019a0 <HAL_DMA_Abort_IT>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80ef 	beq.w	80055c0 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f918 	bl	8005628 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80053f8:	e0e2      	b.n	80055c0 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fda4 	bl	8004f48 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f911 	bl	8005628 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005406:	e0db      	b.n	80055c0 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d055      	beq.n	80054be <HAL_SAI_IRQHandler+0x22e>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d050      	beq.n	80054be <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2240      	movs	r2, #64	@ 0x40
 8005422:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800542a:	f043 0208 	orr.w	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d038      	beq.n	80054b0 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544a:	4a62      	ldr	r2, [pc, #392]	@ (80055d4 <HAL_SAI_IRQHandler+0x344>)
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005452:	4618      	mov	r0, r3
 8005454:	f7fc faa4 	bl	80019a0 <HAL_DMA_Abort_IT>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005464:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8da 	bl	8005628 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80a3 	beq.w	80055c4 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005482:	4a54      	ldr	r2, [pc, #336]	@ (80055d4 <HAL_SAI_IRQHandler+0x344>)
 8005484:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	4618      	mov	r0, r3
 800548c:	f7fc fa88 	bl	80019a0 <HAL_DMA_Abort_IT>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8096 	beq.w	80055c4 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8bd 	bl	8005628 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ae:	e089      	b.n	80055c4 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fd49 	bl	8004f48 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8b6 	bl	8005628 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054bc:	e082      	b.n	80055c4 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d061      	beq.n	800558c <HAL_SAI_IRQHandler+0x2fc>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d05c      	beq.n	800558c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2204      	movs	r2, #4
 80054d8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d036      	beq.n	8005562 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d016      	beq.n	800552a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005500:	4a34      	ldr	r2, [pc, #208]	@ (80055d4 <HAL_SAI_IRQHandler+0x344>)
 8005502:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005508:	4618      	mov	r0, r3
 800550a:	f7fc fa49 	bl	80019a0 <HAL_DMA_Abort_IT>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f87f 	bl	8005628 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04a      	beq.n	80055c8 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005536:	4a27      	ldr	r2, [pc, #156]	@ (80055d4 <HAL_SAI_IRQHandler+0x344>)
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc fa2e 	bl	80019a0 <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03e      	beq.n	80055c8 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005550:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f864 	bl	8005628 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005560:	e032      	b.n	80055c8 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f84f 	bl	8005628 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800558a:	e01d      	b.n	80055c8 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b00      	cmp	r3, #0
 8005594:	d019      	beq.n	80055ca <HAL_SAI_IRQHandler+0x33a>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	d014      	beq.n	80055ca <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2210      	movs	r2, #16
 80055a6:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ae:	f043 0210 	orr.w	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f835 	bl	8005628 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80055be:	e004      	b.n	80055ca <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055c0:	bf00      	nop
 80055c2:	e002      	b.n	80055ca <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055c4:	bf00      	nop
 80055c6:	e000      	b.n	80055ca <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055c8:	bf00      	nop
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	08005acf 	.word	0x08005acf

080055d8 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <SAI_InitI2S+0x2e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d103      	bne.n	8005672 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005670:	e002      	b.n	8005678 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800567e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005686:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e077      	b.n	8005792 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80056b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80056b6:	e006      	b.n	80056c6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056be:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d84f      	bhi.n	800576c <SAI_InitI2S+0x130>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <SAI_InitI2S+0x98>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	08005707 	.word	0x08005707
 80056dc:	08005729 	.word	0x08005729
 80056e0:	0800574b 	.word	0x0800574b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2280      	movs	r2, #128	@ 0x80
 80056e8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	011a      	lsls	r2, r3, #4
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2240      	movs	r2, #64	@ 0x40
 8005702:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005704:	e035      	b.n	8005772 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2280      	movs	r2, #128	@ 0x80
 800570a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	019a      	lsls	r2, r3, #6
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2280      	movs	r2, #128	@ 0x80
 8005724:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005726:	e024      	b.n	8005772 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	22c0      	movs	r2, #192	@ 0xc0
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	019a      	lsls	r2, r3, #6
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2280      	movs	r2, #128	@ 0x80
 8005746:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005748:	e013      	b.n	8005772 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	22e0      	movs	r2, #224	@ 0xe0
 800574e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	019a      	lsls	r2, r3, #6
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2280      	movs	r2, #128	@ 0x80
 8005768:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800576a:	e002      	b.n	8005772 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	75fb      	strb	r3, [r7, #23]
      break;
 8005770:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d10b      	bne.n	8005790 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d102      	bne.n	8005784 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2210      	movs	r2, #16
 8005782:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d102      	bne.n	8005790 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2208      	movs	r2, #8
 800578e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop

080057a0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <SAI_InitPCM+0x2e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d103      	bne.n	80057d6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057d4:	e002      	b.n	80057dc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80057e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80057f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005804:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d103      	bne.n	8005814 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
 8005812:	e002      	b.n	800581a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	220d      	movs	r2, #13
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d837      	bhi.n	8005890 <SAI_InitPCM+0xf0>
 8005820:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <SAI_InitPCM+0x88>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005839 	.word	0x08005839
 800582c:	0800584f 	.word	0x0800584f
 8005830:	08005865 	.word	0x08005865
 8005834:	0800587b 	.word	0x0800587b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2280      	movs	r2, #128	@ 0x80
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2240      	movs	r2, #64	@ 0x40
 800584a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800584c:	e023      	b.n	8005896 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2280      	movs	r2, #128	@ 0x80
 8005852:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2280      	movs	r2, #128	@ 0x80
 8005860:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005862:	e018      	b.n	8005896 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	22c0      	movs	r2, #192	@ 0xc0
 8005868:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2280      	movs	r2, #128	@ 0x80
 8005876:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005878:	e00d      	b.n	8005896 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	22e0      	movs	r2, #224	@ 0xe0
 800587e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2280      	movs	r2, #128	@ 0x80
 800588c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800588e:	e002      	b.n	8005896 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	75fb      	strb	r3, [r7, #23]
      break;
 8005894:	bf00      	nop
  }

  return status;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d103      	bne.n	80058c2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f043 0308 	orr.w	r3, r3, #8
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d10b      	bne.n	80058e2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d003      	beq.n	80058da <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d103      	bne.n	80058e2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f043 0310 	orr.w	r3, r3, #16
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d003      	beq.n	80058f2 <SAI_InterruptFlag+0x4e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d104      	bne.n	80058fc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e003      	b.n	8005904 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800591c:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <SAI_Disable+0x6c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a18      	ldr	r2, [pc, #96]	@ (8005984 <SAI_Disable+0x70>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0b1b      	lsrs	r3, r3, #12
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800593e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	72fb      	strb	r3, [r7, #11]
      break;
 800595a:	e009      	b.n	8005970 <SAI_Disable+0x5c>
    }
    count--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b01      	subs	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e7      	bne.n	8005940 <SAI_Disable+0x2c>

  return status;
 8005970:	7afb      	ldrb	r3, [r7, #11]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000004 	.word	0x20000004
 8005984:	95cbec1b 	.word	0x95cbec1b

08005988 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	2b20      	cmp	r3, #32
 800599c:	d01c      	beq.n	80059d8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80059b4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059b6:	2100      	movs	r1, #0
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ff73 	bl	80058a4 <SAI_InterruptFlag>
 80059be:	4603      	mov	r3, r0
 80059c0:	43d9      	mvns	r1, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	400a      	ands	r2, r1
 80059ce:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff fdfd 	bl	80055d8 <HAL_SAI_TxCpltCallback>
#endif
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff fdf9 	bl	80055ec <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d01c      	beq.n	8005a52 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005a26:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005a30:	2100      	movs	r1, #0
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff ff36 	bl	80058a4 <SAI_InterruptFlag>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	43d9      	mvns	r1, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	400a      	ands	r2, r1
 8005a48:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fdd4 	bl	8005600 <HAL_SAI_RxCpltCallback>
#endif
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fdd0 	bl	8005614 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff ff32 	bl	8005914 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fdb1 	bl	8005628 <HAL_SAI_ErrorCallback>
#endif
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005aea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d00a      	beq.n	8005b1e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff ff03 	bl	8005914 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0208 	orr.w	r2, r2, #8
 8005b1c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff fd7a 	bl	8005628 <HAL_SAI_ErrorCallback>
#endif
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e095      	b.n	8005c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	e005      	b.n	8005b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fb f920 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bb4:	d902      	bls.n	8005bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e002      	b.n	8005bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005bca:	d007      	beq.n	8005bdc <HAL_SPI_Init+0xa0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bd4:	d002      	beq.n	8005bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1e:	ea42 0103 	orr.w	r1, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 0204 	and.w	r2, r3, #4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c58:	ea42 0103 	orr.w	r1, r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b088      	sub	sp, #32
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c92:	f7fb fbed 	bl	8001470 <HAL_GetTick>
 8005c96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e15c      	b.n	8005f66 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0x36>
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e154      	b.n	8005f66 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Transmit+0x48>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e14d      	b.n	8005f66 <HAL_SPI_Transmit+0x2e4>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1c:	d10f      	bne.n	8005d3e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d48:	2b40      	cmp	r3, #64	@ 0x40
 8005d4a:	d007      	beq.n	8005d5c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d64:	d952      	bls.n	8005e0c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_Transmit+0xf2>
 8005d6e:	8b7b      	ldrh	r3, [r7, #26]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d145      	bne.n	8005e00 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d98:	e032      	b.n	8005e00 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d112      	bne.n	8005dce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dac:	881a      	ldrh	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db8:	1c9a      	adds	r2, r3, #2
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dcc:	e018      	b.n	8005e00 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dce:	f7fb fb4f 	bl	8001470 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d803      	bhi.n	8005de6 <HAL_SPI_Transmit+0x164>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d102      	bne.n	8005dec <HAL_SPI_Transmit+0x16a>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0b2      	b.n	8005f66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1c7      	bne.n	8005d9a <HAL_SPI_Transmit+0x118>
 8005e0a:	e083      	b.n	8005f14 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <HAL_SPI_Transmit+0x198>
 8005e14:	8b7b      	ldrh	r3, [r7, #26]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d177      	bne.n	8005f0a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d912      	bls.n	8005e4a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	881a      	ldrh	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e34:	1c9a      	adds	r2, r3, #2
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b02      	subs	r3, #2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e48:	e05f      	b.n	8005f0a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e70:	e04b      	b.n	8005f0a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d12b      	bne.n	8005ed8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d912      	bls.n	8005eb0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8e:	881a      	ldrh	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9a:	1c9a      	adds	r2, r3, #2
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b02      	subs	r3, #2
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eae:	e02c      	b.n	8005f0a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	7812      	ldrb	r2, [r2, #0]
 8005ebc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ed6:	e018      	b.n	8005f0a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed8:	f7fb faca 	bl	8001470 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d803      	bhi.n	8005ef0 <HAL_SPI_Transmit+0x26e>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Transmit+0x274>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e02d      	b.n	8005f66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1ae      	bne.n	8005e72 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f947 	bl	80061ac <SPI_EndRxTxTransaction>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f80:	f7fb fa76 	bl	8001470 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f90:	f7fb fa6e 	bl	8001470 <HAL_GetTick>
 8005f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f96:	4b39      	ldr	r3, [pc, #228]	@ (800607c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	015b      	lsls	r3, r3, #5
 8005f9c:	0d1b      	lsrs	r3, r3, #20
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	fb02 f303 	mul.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa6:	e054      	b.n	8006052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d050      	beq.n	8006052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fb0:	f7fb fa5e 	bl	8001470 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d902      	bls.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d13d      	bne.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fde:	d111      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe8:	d004      	beq.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff2:	d107      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800600c:	d10f      	bne.n	800602e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800602c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e017      	b.n	8006072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3b01      	subs	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	429a      	cmp	r2, r3
 800606e:	d19b      	bne.n	8005fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000004 	.word	0x20000004

08006080 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	@ 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006092:	f7fb f9ed 	bl	8001470 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80060a2:	f7fb f9e5 	bl	8001470 <HAL_GetTick>
 80060a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060b0:	4b3d      	ldr	r3, [pc, #244]	@ (80061a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00da      	lsls	r2, r3, #3
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	0d1b      	lsrs	r3, r3, #20
 80060c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060c8:	e060      	b.n	800618c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060d0:	d107      	bne.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d050      	beq.n	800618c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ea:	f7fb f9c1 	bl	8001470 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d902      	bls.n	8006100 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d13d      	bne.n	800617c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800610e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006118:	d111      	bne.n	800613e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006122:	d004      	beq.n	800612e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800612c:	d107      	bne.n	800613e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800613c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006146:	d10f      	bne.n	8006168 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e010      	b.n	800619e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	3b01      	subs	r3, #1
 800618a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d196      	bne.n	80060ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3728      	adds	r7, #40	@ 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000004 	.word	0x20000004

080061ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2200      	movs	r2, #0
 80061c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff ff5b 	bl	8006080 <SPI_WaitFifoStateUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e027      	b.n	8006230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2180      	movs	r1, #128	@ 0x80
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff fec0 	bl	8005f70 <SPI_WaitFlagStateUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e014      	b.n	8006230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff34 	bl	8006080 <SPI_WaitFifoStateUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e000      	b.n	8006230 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e040      	b.n	80062cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fa fe1c 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	@ 0x24
 8006264:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fb6a 	bl	8006958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f8af 	bl	80063e8 <UART_SetConfig>
 800628a:	4603      	mov	r3, r0
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e01b      	b.n	80062cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fbe9 	bl	8006a9c <UART_CheckIdleState>
 80062ca:	4603      	mov	r3, r0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	@ 0x28
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d177      	bne.n	80063dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_UART_Transmit+0x24>
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e070      	b.n	80063de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2221      	movs	r2, #33	@ 0x21
 8006308:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630a:	f7fb f8b1 	bl	8001470 <HAL_GetTick>
 800630e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006328:	d108      	bne.n	800633c <HAL_UART_Transmit+0x68>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	e003      	b.n	8006344 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006344:	e02f      	b.n	80063a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	2180      	movs	r1, #128	@ 0x80
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fc4b 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e03b      	b.n	80063de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	881a      	ldrh	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006378:	b292      	uxth	r2, r2
 800637a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	3302      	adds	r3, #2
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e007      	b.n	8006394 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	781a      	ldrb	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3301      	adds	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1c9      	bne.n	8006346 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	2140      	movs	r1, #64	@ 0x40
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fc15 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e005      	b.n	80063de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063ec:	b08a      	sub	sp, #40	@ 0x28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4313      	orrs	r3, r2
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4ba4      	ldr	r3, [pc, #656]	@ (80066a8 <UART_SetConfig+0x2c0>)
 8006418:	4013      	ands	r3, r2
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006420:	430b      	orrs	r3, r1
 8006422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a99      	ldr	r2, [pc, #612]	@ (80066ac <UART_SetConfig+0x2c4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006450:	4313      	orrs	r3, r2
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a90      	ldr	r2, [pc, #576]	@ (80066b0 <UART_SetConfig+0x2c8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d126      	bne.n	80064c0 <UART_SetConfig+0xd8>
 8006472:	4b90      	ldr	r3, [pc, #576]	@ (80066b4 <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	2b03      	cmp	r3, #3
 800647e:	d81b      	bhi.n	80064b8 <UART_SetConfig+0xd0>
 8006480:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <UART_SetConfig+0xa0>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	08006499 	.word	0x08006499
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064b1 	.word	0x080064b1
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649e:	e116      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064a0:	2302      	movs	r3, #2
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a6:	e112      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ae:	e10e      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b6:	e10a      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e106      	b.n	80066ce <UART_SetConfig+0x2e6>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a7c      	ldr	r2, [pc, #496]	@ (80066b8 <UART_SetConfig+0x2d0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d138      	bne.n	800653c <UART_SetConfig+0x154>
 80064ca:	4b7a      	ldr	r3, [pc, #488]	@ (80066b4 <UART_SetConfig+0x2cc>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	f003 030c 	and.w	r3, r3, #12
 80064d4:	2b0c      	cmp	r3, #12
 80064d6:	d82d      	bhi.n	8006534 <UART_SetConfig+0x14c>
 80064d8:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <UART_SetConfig+0xf8>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006535 	.word	0x08006535
 80064e8:	08006535 	.word	0x08006535
 80064ec:	08006535 	.word	0x08006535
 80064f0:	08006525 	.word	0x08006525
 80064f4:	08006535 	.word	0x08006535
 80064f8:	08006535 	.word	0x08006535
 80064fc:	08006535 	.word	0x08006535
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006535 	.word	0x08006535
 8006508:	08006535 	.word	0x08006535
 800650c:	08006535 	.word	0x08006535
 8006510:	0800652d 	.word	0x0800652d
 8006514:	2300      	movs	r3, #0
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651a:	e0d8      	b.n	80066ce <UART_SetConfig+0x2e6>
 800651c:	2302      	movs	r3, #2
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006522:	e0d4      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652a:	e0d0      	b.n	80066ce <UART_SetConfig+0x2e6>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006532:	e0cc      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653a:	e0c8      	b.n	80066ce <UART_SetConfig+0x2e6>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5e      	ldr	r2, [pc, #376]	@ (80066bc <UART_SetConfig+0x2d4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d125      	bne.n	8006592 <UART_SetConfig+0x1aa>
 8006546:	4b5b      	ldr	r3, [pc, #364]	@ (80066b4 <UART_SetConfig+0x2cc>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006550:	2b30      	cmp	r3, #48	@ 0x30
 8006552:	d016      	beq.n	8006582 <UART_SetConfig+0x19a>
 8006554:	2b30      	cmp	r3, #48	@ 0x30
 8006556:	d818      	bhi.n	800658a <UART_SetConfig+0x1a2>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d00a      	beq.n	8006572 <UART_SetConfig+0x18a>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d814      	bhi.n	800658a <UART_SetConfig+0x1a2>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <UART_SetConfig+0x182>
 8006564:	2b10      	cmp	r3, #16
 8006566:	d008      	beq.n	800657a <UART_SetConfig+0x192>
 8006568:	e00f      	b.n	800658a <UART_SetConfig+0x1a2>
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006570:	e0ad      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006572:	2302      	movs	r3, #2
 8006574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006578:	e0a9      	b.n	80066ce <UART_SetConfig+0x2e6>
 800657a:	2304      	movs	r3, #4
 800657c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006580:	e0a5      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006582:	2308      	movs	r3, #8
 8006584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006588:	e0a1      	b.n	80066ce <UART_SetConfig+0x2e6>
 800658a:	2310      	movs	r3, #16
 800658c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006590:	e09d      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a4a      	ldr	r2, [pc, #296]	@ (80066c0 <UART_SetConfig+0x2d8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d125      	bne.n	80065e8 <UART_SetConfig+0x200>
 800659c:	4b45      	ldr	r3, [pc, #276]	@ (80066b4 <UART_SetConfig+0x2cc>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065a8:	d016      	beq.n	80065d8 <UART_SetConfig+0x1f0>
 80065aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80065ac:	d818      	bhi.n	80065e0 <UART_SetConfig+0x1f8>
 80065ae:	2b80      	cmp	r3, #128	@ 0x80
 80065b0:	d00a      	beq.n	80065c8 <UART_SetConfig+0x1e0>
 80065b2:	2b80      	cmp	r3, #128	@ 0x80
 80065b4:	d814      	bhi.n	80065e0 <UART_SetConfig+0x1f8>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <UART_SetConfig+0x1d8>
 80065ba:	2b40      	cmp	r3, #64	@ 0x40
 80065bc:	d008      	beq.n	80065d0 <UART_SetConfig+0x1e8>
 80065be:	e00f      	b.n	80065e0 <UART_SetConfig+0x1f8>
 80065c0:	2300      	movs	r3, #0
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c6:	e082      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065c8:	2302      	movs	r3, #2
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ce:	e07e      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d6:	e07a      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065de:	e076      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e072      	b.n	80066ce <UART_SetConfig+0x2e6>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a35      	ldr	r2, [pc, #212]	@ (80066c4 <UART_SetConfig+0x2dc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d12a      	bne.n	8006648 <UART_SetConfig+0x260>
 80065f2:	4b30      	ldr	r3, [pc, #192]	@ (80066b4 <UART_SetConfig+0x2cc>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006600:	d01a      	beq.n	8006638 <UART_SetConfig+0x250>
 8006602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006606:	d81b      	bhi.n	8006640 <UART_SetConfig+0x258>
 8006608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800660c:	d00c      	beq.n	8006628 <UART_SetConfig+0x240>
 800660e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006612:	d815      	bhi.n	8006640 <UART_SetConfig+0x258>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <UART_SetConfig+0x238>
 8006618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800661c:	d008      	beq.n	8006630 <UART_SetConfig+0x248>
 800661e:	e00f      	b.n	8006640 <UART_SetConfig+0x258>
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006626:	e052      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006628:	2302      	movs	r3, #2
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662e:	e04e      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006636:	e04a      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e046      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e042      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a17      	ldr	r2, [pc, #92]	@ (80066ac <UART_SetConfig+0x2c4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d13a      	bne.n	80066c8 <UART_SetConfig+0x2e0>
 8006652:	4b18      	ldr	r3, [pc, #96]	@ (80066b4 <UART_SetConfig+0x2cc>)
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800665c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006660:	d01a      	beq.n	8006698 <UART_SetConfig+0x2b0>
 8006662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006666:	d81b      	bhi.n	80066a0 <UART_SetConfig+0x2b8>
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800666c:	d00c      	beq.n	8006688 <UART_SetConfig+0x2a0>
 800666e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006672:	d815      	bhi.n	80066a0 <UART_SetConfig+0x2b8>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <UART_SetConfig+0x298>
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800667c:	d008      	beq.n	8006690 <UART_SetConfig+0x2a8>
 800667e:	e00f      	b.n	80066a0 <UART_SetConfig+0x2b8>
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006686:	e022      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668e:	e01e      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006696:	e01a      	b.n	80066ce <UART_SetConfig+0x2e6>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669e:	e016      	b.n	80066ce <UART_SetConfig+0x2e6>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e012      	b.n	80066ce <UART_SetConfig+0x2e6>
 80066a8:	efff69f3 	.word	0xefff69f3
 80066ac:	40008000 	.word	0x40008000
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40004400 	.word	0x40004400
 80066bc:	40004800 	.word	0x40004800
 80066c0:	40004c00 	.word	0x40004c00
 80066c4:	40005000 	.word	0x40005000
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a9f      	ldr	r2, [pc, #636]	@ (8006950 <UART_SetConfig+0x568>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d17a      	bne.n	80067ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d824      	bhi.n	800672a <UART_SetConfig+0x342>
 80066e0:	a201      	add	r2, pc, #4	@ (adr r2, 80066e8 <UART_SetConfig+0x300>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	0800672b 	.word	0x0800672b
 80066f0:	08006715 	.word	0x08006715
 80066f4:	0800672b 	.word	0x0800672b
 80066f8:	0800671b 	.word	0x0800671b
 80066fc:	0800672b 	.word	0x0800672b
 8006700:	0800672b 	.word	0x0800672b
 8006704:	0800672b 	.word	0x0800672b
 8006708:	08006723 	.word	0x08006723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fc fed2 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8006710:	61f8      	str	r0, [r7, #28]
        break;
 8006712:	e010      	b.n	8006736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006714:	4b8f      	ldr	r3, [pc, #572]	@ (8006954 <UART_SetConfig+0x56c>)
 8006716:	61fb      	str	r3, [r7, #28]
        break;
 8006718:	e00d      	b.n	8006736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671a:	f7fc fe33 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800671e:	61f8      	str	r0, [r7, #28]
        break;
 8006720:	e009      	b.n	8006736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006726:	61fb      	str	r3, [r7, #28]
        break;
 8006728:	e005      	b.n	8006736 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80fb 	beq.w	8006934 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	429a      	cmp	r2, r3
 800674c:	d305      	bcc.n	800675a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	429a      	cmp	r2, r3
 8006758:	d903      	bls.n	8006762 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006760:	e0e8      	b.n	8006934 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	2200      	movs	r2, #0
 8006766:	461c      	mov	r4, r3
 8006768:	4615      	mov	r5, r2
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	022b      	lsls	r3, r5, #8
 8006774:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006778:	0222      	lsls	r2, r4, #8
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	6849      	ldr	r1, [r1, #4]
 800677e:	0849      	lsrs	r1, r1, #1
 8006780:	2000      	movs	r0, #0
 8006782:	4688      	mov	r8, r1
 8006784:	4681      	mov	r9, r0
 8006786:	eb12 0a08 	adds.w	sl, r2, r8
 800678a:	eb43 0b09 	adc.w	fp, r3, r9
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	4650      	mov	r0, sl
 800679e:	4659      	mov	r1, fp
 80067a0:	f7f9 fd12 	bl	80001c8 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4613      	mov	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b2:	d308      	bcc.n	80067c6 <UART_SetConfig+0x3de>
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ba:	d204      	bcs.n	80067c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	60da      	str	r2, [r3, #12]
 80067c4:	e0b6      	b.n	8006934 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067cc:	e0b2      	b.n	8006934 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d6:	d15e      	bne.n	8006896 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d828      	bhi.n	8006832 <UART_SetConfig+0x44a>
 80067e0:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <UART_SetConfig+0x400>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fc fe52 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8006810:	61f8      	str	r0, [r7, #28]
        break;
 8006812:	e014      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7fc fe64 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8006818:	61f8      	str	r0, [r7, #28]
        break;
 800681a:	e010      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b4d      	ldr	r3, [pc, #308]	@ (8006954 <UART_SetConfig+0x56c>)
 800681e:	61fb      	str	r3, [r7, #28]
        break;
 8006820:	e00d      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fc fdaf 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8006826:	61f8      	str	r0, [r7, #28]
        break;
 8006828:	e009      	b.n	800683e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682e:	61fb      	str	r3, [r7, #28]
        break;
 8006830:	e005      	b.n	800683e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800683c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d077      	beq.n	8006934 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	005a      	lsls	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	fbb2 f3f3 	udiv	r3, r2, r3
 8006858:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b0f      	cmp	r3, #15
 800685e:	d916      	bls.n	800688e <UART_SetConfig+0x4a6>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006866:	d212      	bcs.n	800688e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f023 030f 	bic.w	r3, r3, #15
 8006870:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	b29a      	uxth	r2, r3
 800687e:	8afb      	ldrh	r3, [r7, #22]
 8006880:	4313      	orrs	r3, r2
 8006882:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	8afa      	ldrh	r2, [r7, #22]
 800688a:	60da      	str	r2, [r3, #12]
 800688c:	e052      	b.n	8006934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006894:	e04e      	b.n	8006934 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006896:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800689a:	2b08      	cmp	r3, #8
 800689c:	d827      	bhi.n	80068ee <UART_SetConfig+0x506>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <UART_SetConfig+0x4bc>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	080068ef 	.word	0x080068ef
 80068b4:	080068df 	.word	0x080068df
 80068b8:	080068ef 	.word	0x080068ef
 80068bc:	080068ef 	.word	0x080068ef
 80068c0:	080068ef 	.word	0x080068ef
 80068c4:	080068e7 	.word	0x080068e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c8:	f7fc fdf4 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80068cc:	61f8      	str	r0, [r7, #28]
        break;
 80068ce:	e014      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d0:	f7fc fe06 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 80068d4:	61f8      	str	r0, [r7, #28]
        break;
 80068d6:	e010      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006954 <UART_SetConfig+0x56c>)
 80068da:	61fb      	str	r3, [r7, #28]
        break;
 80068dc:	e00d      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068de:	f7fc fd51 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 80068e2:	61f8      	str	r0, [r7, #28]
        break;
 80068e4:	e009      	b.n	80068fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ea:	61fb      	str	r3, [r7, #28]
        break;
 80068ec:	e005      	b.n	80068fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068f8:	bf00      	nop
    }

    if (pclk != 0U)
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085a      	lsrs	r2, r3, #1
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	441a      	add	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b0f      	cmp	r3, #15
 8006918:	d909      	bls.n	800692e <UART_SetConfig+0x546>
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006920:	d205      	bcs.n	800692e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60da      	str	r2, [r3, #12]
 800692c:	e002      	b.n	8006934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006940:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006944:	4618      	mov	r0, r3
 8006946:	3728      	adds	r7, #40	@ 0x28
 8006948:	46bd      	mov	sp, r7
 800694a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694e:	bf00      	nop
 8006950:	40008000 	.word	0x40008000
 8006954:	00f42400 	.word	0x00f42400

08006958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a56:	d10a      	bne.n	8006a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b098      	sub	sp, #96	@ 0x60
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aac:	f7fa fce0 	bl	8001470 <HAL_GetTick>
 8006ab0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d12e      	bne.n	8006b1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f88c 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d021      	beq.n	8006b1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e062      	b.n	8006be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d149      	bne.n	8006bc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f856 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d03c      	beq.n	8006bc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	623b      	str	r3, [r7, #32]
   return(result);
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	69b9      	ldr	r1, [r7, #24]
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e011      	b.n	8006be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3758      	adds	r7, #88	@ 0x58
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfc:	e04f      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d04b      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7fa fc33 	bl	8001470 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e04e      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d037      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b80      	cmp	r3, #128	@ 0x80
 8006c32:	d034      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b40      	cmp	r3, #64	@ 0x40
 8006c38:	d031      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d110      	bne.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f838 	bl	8006cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e029      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c78:	d111      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f81e 	bl	8006cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e00f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	bf0c      	ite	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	2300      	movne	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d0a0      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b095      	sub	sp, #84	@ 0x54
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e6      	bne.n	8006cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f023 0301 	bic.w	r3, r3, #1
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d118      	bne.n	8006d6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f023 0310 	bic.w	r3, r3, #16
 8006d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6979      	ldr	r1, [r7, #20]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	613b      	str	r3, [r7, #16]
   return(result);
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e6      	bne.n	8006d3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d82:	bf00      	nop
 8006d84:	3754      	adds	r7, #84	@ 0x54
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <std>:
 8006d90:	2300      	movs	r3, #0
 8006d92:	b510      	push	{r4, lr}
 8006d94:	4604      	mov	r4, r0
 8006d96:	e9c0 3300 	strd	r3, r3, [r0]
 8006d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d9e:	6083      	str	r3, [r0, #8]
 8006da0:	8181      	strh	r1, [r0, #12]
 8006da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006da4:	81c2      	strh	r2, [r0, #14]
 8006da6:	6183      	str	r3, [r0, #24]
 8006da8:	4619      	mov	r1, r3
 8006daa:	2208      	movs	r2, #8
 8006dac:	305c      	adds	r0, #92	@ 0x5c
 8006dae:	f000 f9e7 	bl	8007180 <memset>
 8006db2:	4b0d      	ldr	r3, [pc, #52]	@ (8006de8 <std+0x58>)
 8006db4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <std+0x5c>)
 8006db8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x60>)
 8006dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <std+0x64>)
 8006dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x68>)
 8006dc4:	6224      	str	r4, [r4, #32]
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d006      	beq.n	8006dd8 <std+0x48>
 8006dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dce:	4294      	cmp	r4, r2
 8006dd0:	d002      	beq.n	8006dd8 <std+0x48>
 8006dd2:	33d0      	adds	r3, #208	@ 0xd0
 8006dd4:	429c      	cmp	r4, r3
 8006dd6:	d105      	bne.n	8006de4 <std+0x54>
 8006dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de0:	f000 ba46 	b.w	8007270 <__retarget_lock_init_recursive>
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	bf00      	nop
 8006de8:	08006fd1 	.word	0x08006fd1
 8006dec:	08006ff3 	.word	0x08006ff3
 8006df0:	0800702b 	.word	0x0800702b
 8006df4:	0800704f 	.word	0x0800704f
 8006df8:	2000039c 	.word	0x2000039c

08006dfc <stdio_exit_handler>:
 8006dfc:	4a02      	ldr	r2, [pc, #8]	@ (8006e08 <stdio_exit_handler+0xc>)
 8006dfe:	4903      	ldr	r1, [pc, #12]	@ (8006e0c <stdio_exit_handler+0x10>)
 8006e00:	4803      	ldr	r0, [pc, #12]	@ (8006e10 <stdio_exit_handler+0x14>)
 8006e02:	f000 b869 	b.w	8006ed8 <_fwalk_sglue>
 8006e06:	bf00      	nop
 8006e08:	20000010 	.word	0x20000010
 8006e0c:	08007571 	.word	0x08007571
 8006e10:	20000020 	.word	0x20000020

08006e14 <cleanup_stdio>:
 8006e14:	6841      	ldr	r1, [r0, #4]
 8006e16:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <cleanup_stdio+0x34>)
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	d001      	beq.n	8006e24 <cleanup_stdio+0x10>
 8006e20:	f000 fba6 	bl	8007570 <_fflush_r>
 8006e24:	68a1      	ldr	r1, [r4, #8]
 8006e26:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <cleanup_stdio+0x38>)
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	d002      	beq.n	8006e32 <cleanup_stdio+0x1e>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fb9f 	bl	8007570 <_fflush_r>
 8006e32:	68e1      	ldr	r1, [r4, #12]
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <cleanup_stdio+0x3c>)
 8006e36:	4299      	cmp	r1, r3
 8006e38:	d004      	beq.n	8006e44 <cleanup_stdio+0x30>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f000 bb96 	b.w	8007570 <_fflush_r>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	2000039c 	.word	0x2000039c
 8006e4c:	20000404 	.word	0x20000404
 8006e50:	2000046c 	.word	0x2000046c

08006e54 <global_stdio_init.part.0>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <global_stdio_init.part.0+0x30>)
 8006e58:	4c0b      	ldr	r4, [pc, #44]	@ (8006e88 <global_stdio_init.part.0+0x34>)
 8006e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e8c <global_stdio_init.part.0+0x38>)
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	2200      	movs	r2, #0
 8006e62:	2104      	movs	r1, #4
 8006e64:	f7ff ff94 	bl	8006d90 <std>
 8006e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	2109      	movs	r1, #9
 8006e70:	f7ff ff8e 	bl	8006d90 <std>
 8006e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e78:	2202      	movs	r2, #2
 8006e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7e:	2112      	movs	r1, #18
 8006e80:	f7ff bf86 	b.w	8006d90 <std>
 8006e84:	200004d4 	.word	0x200004d4
 8006e88:	2000039c 	.word	0x2000039c
 8006e8c:	08006dfd 	.word	0x08006dfd

08006e90 <__sfp_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	@ (8006e98 <__sfp_lock_acquire+0x8>)
 8006e92:	f000 b9ee 	b.w	8007272 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	200004dd 	.word	0x200004dd

08006e9c <__sfp_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	@ (8006ea4 <__sfp_lock_release+0x8>)
 8006e9e:	f000 b9e9 	b.w	8007274 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	200004dd 	.word	0x200004dd

08006ea8 <__sinit>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	f7ff fff0 	bl	8006e90 <__sfp_lock_acquire>
 8006eb0:	6a23      	ldr	r3, [r4, #32]
 8006eb2:	b11b      	cbz	r3, 8006ebc <__sinit+0x14>
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f7ff bff0 	b.w	8006e9c <__sfp_lock_release>
 8006ebc:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <__sinit+0x28>)
 8006ebe:	6223      	str	r3, [r4, #32]
 8006ec0:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <__sinit+0x2c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f5      	bne.n	8006eb4 <__sinit+0xc>
 8006ec8:	f7ff ffc4 	bl	8006e54 <global_stdio_init.part.0>
 8006ecc:	e7f2      	b.n	8006eb4 <__sinit+0xc>
 8006ece:	bf00      	nop
 8006ed0:	08006e15 	.word	0x08006e15
 8006ed4:	200004d4 	.word	0x200004d4

08006ed8 <_fwalk_sglue>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	4607      	mov	r7, r0
 8006ede:	4688      	mov	r8, r1
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8006eec:	d505      	bpl.n	8006efa <_fwalk_sglue+0x22>
 8006eee:	6824      	ldr	r4, [r4, #0]
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	d1f7      	bne.n	8006ee4 <_fwalk_sglue+0xc>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d907      	bls.n	8006f10 <_fwalk_sglue+0x38>
 8006f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f04:	3301      	adds	r3, #1
 8006f06:	d003      	beq.n	8006f10 <_fwalk_sglue+0x38>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c0      	blx	r8
 8006f0e:	4306      	orrs	r6, r0
 8006f10:	3568      	adds	r5, #104	@ 0x68
 8006f12:	e7e9      	b.n	8006ee8 <_fwalk_sglue+0x10>

08006f14 <_puts_r>:
 8006f14:	6a03      	ldr	r3, [r0, #32]
 8006f16:	b570      	push	{r4, r5, r6, lr}
 8006f18:	6884      	ldr	r4, [r0, #8]
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	460e      	mov	r6, r1
 8006f1e:	b90b      	cbnz	r3, 8006f24 <_puts_r+0x10>
 8006f20:	f7ff ffc2 	bl	8006ea8 <__sinit>
 8006f24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f26:	07db      	lsls	r3, r3, #31
 8006f28:	d405      	bmi.n	8006f36 <_puts_r+0x22>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	0598      	lsls	r0, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_puts_r+0x22>
 8006f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f32:	f000 f99e 	bl	8007272 <__retarget_lock_acquire_recursive>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	0719      	lsls	r1, r3, #28
 8006f3a:	d502      	bpl.n	8006f42 <_puts_r+0x2e>
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d135      	bne.n	8006fae <_puts_r+0x9a>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 f8c5 	bl	80070d4 <__swsetup_r>
 8006f4a:	b380      	cbz	r0, 8006fae <_puts_r+0x9a>
 8006f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f52:	07da      	lsls	r2, r3, #31
 8006f54:	d405      	bmi.n	8006f62 <_puts_r+0x4e>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	059b      	lsls	r3, r3, #22
 8006f5a:	d402      	bmi.n	8006f62 <_puts_r+0x4e>
 8006f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f5e:	f000 f989 	bl	8007274 <__retarget_lock_release_recursive>
 8006f62:	4628      	mov	r0, r5
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	da04      	bge.n	8006f74 <_puts_r+0x60>
 8006f6a:	69a2      	ldr	r2, [r4, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	dc17      	bgt.n	8006fa0 <_puts_r+0x8c>
 8006f70:	290a      	cmp	r1, #10
 8006f72:	d015      	beq.n	8006fa0 <_puts_r+0x8c>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	6022      	str	r2, [r4, #0]
 8006f7a:	7019      	strb	r1, [r3, #0]
 8006f7c:	68a3      	ldr	r3, [r4, #8]
 8006f7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f82:	3b01      	subs	r3, #1
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d1ed      	bne.n	8006f66 <_puts_r+0x52>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da11      	bge.n	8006fb2 <_puts_r+0x9e>
 8006f8e:	4622      	mov	r2, r4
 8006f90:	210a      	movs	r1, #10
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f85f 	bl	8007056 <__swbuf_r>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0d7      	beq.n	8006f4c <_puts_r+0x38>
 8006f9c:	250a      	movs	r5, #10
 8006f9e:	e7d7      	b.n	8006f50 <_puts_r+0x3c>
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 f857 	bl	8007056 <__swbuf_r>
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d1e7      	bne.n	8006f7c <_puts_r+0x68>
 8006fac:	e7ce      	b.n	8006f4c <_puts_r+0x38>
 8006fae:	3e01      	subs	r6, #1
 8006fb0:	e7e4      	b.n	8006f7c <_puts_r+0x68>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	220a      	movs	r2, #10
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e7ee      	b.n	8006f9c <_puts_r+0x88>
	...

08006fc0 <puts>:
 8006fc0:	4b02      	ldr	r3, [pc, #8]	@ (8006fcc <puts+0xc>)
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f7ff bfa5 	b.w	8006f14 <_puts_r>
 8006fca:	bf00      	nop
 8006fcc:	2000001c 	.word	0x2000001c

08006fd0 <__sread>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd8:	f000 f8fc 	bl	80071d4 <_read_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	bfab      	itete	ge
 8006fe0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fe4:	181b      	addge	r3, r3, r0
 8006fe6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fea:	bfac      	ite	ge
 8006fec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fee:	81a3      	strhlt	r3, [r4, #12]
 8006ff0:	bd10      	pop	{r4, pc}

08006ff2 <__swrite>:
 8006ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	461f      	mov	r7, r3
 8006ff8:	898b      	ldrh	r3, [r1, #12]
 8006ffa:	05db      	lsls	r3, r3, #23
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	4616      	mov	r6, r2
 8007002:	d505      	bpl.n	8007010 <__swrite+0x1e>
 8007004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007008:	2302      	movs	r3, #2
 800700a:	2200      	movs	r2, #0
 800700c:	f000 f8d0 	bl	80071b0 <_lseek_r>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007016:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	4632      	mov	r2, r6
 800701e:	463b      	mov	r3, r7
 8007020:	4628      	mov	r0, r5
 8007022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	f000 b8e7 	b.w	80071f8 <_write_r>

0800702a <__sseek>:
 800702a:	b510      	push	{r4, lr}
 800702c:	460c      	mov	r4, r1
 800702e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007032:	f000 f8bd 	bl	80071b0 <_lseek_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	bf15      	itete	ne
 800703c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800703e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007042:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007046:	81a3      	strheq	r3, [r4, #12]
 8007048:	bf18      	it	ne
 800704a:	81a3      	strhne	r3, [r4, #12]
 800704c:	bd10      	pop	{r4, pc}

0800704e <__sclose>:
 800704e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007052:	f000 b89d 	b.w	8007190 <_close_r>

08007056 <__swbuf_r>:
 8007056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007058:	460e      	mov	r6, r1
 800705a:	4614      	mov	r4, r2
 800705c:	4605      	mov	r5, r0
 800705e:	b118      	cbz	r0, 8007068 <__swbuf_r+0x12>
 8007060:	6a03      	ldr	r3, [r0, #32]
 8007062:	b90b      	cbnz	r3, 8007068 <__swbuf_r+0x12>
 8007064:	f7ff ff20 	bl	8006ea8 <__sinit>
 8007068:	69a3      	ldr	r3, [r4, #24]
 800706a:	60a3      	str	r3, [r4, #8]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	071a      	lsls	r2, r3, #28
 8007070:	d501      	bpl.n	8007076 <__swbuf_r+0x20>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	b943      	cbnz	r3, 8007088 <__swbuf_r+0x32>
 8007076:	4621      	mov	r1, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f000 f82b 	bl	80070d4 <__swsetup_r>
 800707e:	b118      	cbz	r0, 8007088 <__swbuf_r+0x32>
 8007080:	f04f 37ff 	mov.w	r7, #4294967295
 8007084:	4638      	mov	r0, r7
 8007086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	6922      	ldr	r2, [r4, #16]
 800708c:	1a98      	subs	r0, r3, r2
 800708e:	6963      	ldr	r3, [r4, #20]
 8007090:	b2f6      	uxtb	r6, r6
 8007092:	4283      	cmp	r3, r0
 8007094:	4637      	mov	r7, r6
 8007096:	dc05      	bgt.n	80070a4 <__swbuf_r+0x4e>
 8007098:	4621      	mov	r1, r4
 800709a:	4628      	mov	r0, r5
 800709c:	f000 fa68 	bl	8007570 <_fflush_r>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d1ed      	bne.n	8007080 <__swbuf_r+0x2a>
 80070a4:	68a3      	ldr	r3, [r4, #8]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	60a3      	str	r3, [r4, #8]
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	701e      	strb	r6, [r3, #0]
 80070b2:	6962      	ldr	r2, [r4, #20]
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d004      	beq.n	80070c4 <__swbuf_r+0x6e>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	07db      	lsls	r3, r3, #31
 80070be:	d5e1      	bpl.n	8007084 <__swbuf_r+0x2e>
 80070c0:	2e0a      	cmp	r6, #10
 80070c2:	d1df      	bne.n	8007084 <__swbuf_r+0x2e>
 80070c4:	4621      	mov	r1, r4
 80070c6:	4628      	mov	r0, r5
 80070c8:	f000 fa52 	bl	8007570 <_fflush_r>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d0d9      	beq.n	8007084 <__swbuf_r+0x2e>
 80070d0:	e7d6      	b.n	8007080 <__swbuf_r+0x2a>
	...

080070d4 <__swsetup_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4b29      	ldr	r3, [pc, #164]	@ (800717c <__swsetup_r+0xa8>)
 80070d8:	4605      	mov	r5, r0
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	460c      	mov	r4, r1
 80070de:	b118      	cbz	r0, 80070e8 <__swsetup_r+0x14>
 80070e0:	6a03      	ldr	r3, [r0, #32]
 80070e2:	b90b      	cbnz	r3, 80070e8 <__swsetup_r+0x14>
 80070e4:	f7ff fee0 	bl	8006ea8 <__sinit>
 80070e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ec:	0719      	lsls	r1, r3, #28
 80070ee:	d422      	bmi.n	8007136 <__swsetup_r+0x62>
 80070f0:	06da      	lsls	r2, r3, #27
 80070f2:	d407      	bmi.n	8007104 <__swsetup_r+0x30>
 80070f4:	2209      	movs	r2, #9
 80070f6:	602a      	str	r2, [r5, #0]
 80070f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	e033      	b.n	800716c <__swsetup_r+0x98>
 8007104:	0758      	lsls	r0, r3, #29
 8007106:	d512      	bpl.n	800712e <__swsetup_r+0x5a>
 8007108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800710a:	b141      	cbz	r1, 800711e <__swsetup_r+0x4a>
 800710c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007110:	4299      	cmp	r1, r3
 8007112:	d002      	beq.n	800711a <__swsetup_r+0x46>
 8007114:	4628      	mov	r0, r5
 8007116:	f000 f8af 	bl	8007278 <_free_r>
 800711a:	2300      	movs	r3, #0
 800711c:	6363      	str	r3, [r4, #52]	@ 0x34
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	2300      	movs	r3, #0
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f043 0308 	orr.w	r3, r3, #8
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	b94b      	cbnz	r3, 800714e <__swsetup_r+0x7a>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007144:	d003      	beq.n	800714e <__swsetup_r+0x7a>
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	f000 fa5f 	bl	800760c <__smakebuf_r>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	f013 0201 	ands.w	r2, r3, #1
 8007156:	d00a      	beq.n	800716e <__swsetup_r+0x9a>
 8007158:	2200      	movs	r2, #0
 800715a:	60a2      	str	r2, [r4, #8]
 800715c:	6962      	ldr	r2, [r4, #20]
 800715e:	4252      	negs	r2, r2
 8007160:	61a2      	str	r2, [r4, #24]
 8007162:	6922      	ldr	r2, [r4, #16]
 8007164:	b942      	cbnz	r2, 8007178 <__swsetup_r+0xa4>
 8007166:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800716a:	d1c5      	bne.n	80070f8 <__swsetup_r+0x24>
 800716c:	bd38      	pop	{r3, r4, r5, pc}
 800716e:	0799      	lsls	r1, r3, #30
 8007170:	bf58      	it	pl
 8007172:	6962      	ldrpl	r2, [r4, #20]
 8007174:	60a2      	str	r2, [r4, #8]
 8007176:	e7f4      	b.n	8007162 <__swsetup_r+0x8e>
 8007178:	2000      	movs	r0, #0
 800717a:	e7f7      	b.n	800716c <__swsetup_r+0x98>
 800717c:	2000001c 	.word	0x2000001c

08007180 <memset>:
 8007180:	4402      	add	r2, r0
 8007182:	4603      	mov	r3, r0
 8007184:	4293      	cmp	r3, r2
 8007186:	d100      	bne.n	800718a <memset+0xa>
 8007188:	4770      	bx	lr
 800718a:	f803 1b01 	strb.w	r1, [r3], #1
 800718e:	e7f9      	b.n	8007184 <memset+0x4>

08007190 <_close_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d06      	ldr	r5, [pc, #24]	@ (80071ac <_close_r+0x1c>)
 8007194:	2300      	movs	r3, #0
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7fa f851 	bl	8001242 <_close>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_close_r+0x1a>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_close_r+0x1a>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	200004d8 	.word	0x200004d8

080071b0 <_lseek_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d07      	ldr	r5, [pc, #28]	@ (80071d0 <_lseek_r+0x20>)
 80071b4:	4604      	mov	r4, r0
 80071b6:	4608      	mov	r0, r1
 80071b8:	4611      	mov	r1, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	602a      	str	r2, [r5, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	f7fa f866 	bl	8001290 <_lseek>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_lseek_r+0x1e>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_lseek_r+0x1e>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	200004d8 	.word	0x200004d8

080071d4 <_read_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d07      	ldr	r5, [pc, #28]	@ (80071f4 <_read_r+0x20>)
 80071d8:	4604      	mov	r4, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	602a      	str	r2, [r5, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7f9 fff4 	bl	80011d0 <_read>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_read_r+0x1e>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_read_r+0x1e>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	200004d8 	.word	0x200004d8

080071f8 <_write_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	@ (8007218 <_write_r+0x20>)
 80071fc:	4604      	mov	r4, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7f9 ffff 	bl	800120a <_write>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_write_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_write_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200004d8 	.word	0x200004d8

0800721c <__errno>:
 800721c:	4b01      	ldr	r3, [pc, #4]	@ (8007224 <__errno+0x8>)
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	2000001c 	.word	0x2000001c

08007228 <__libc_init_array>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	4d0d      	ldr	r5, [pc, #52]	@ (8007260 <__libc_init_array+0x38>)
 800722c:	4c0d      	ldr	r4, [pc, #52]	@ (8007264 <__libc_init_array+0x3c>)
 800722e:	1b64      	subs	r4, r4, r5
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	2600      	movs	r6, #0
 8007234:	42a6      	cmp	r6, r4
 8007236:	d109      	bne.n	800724c <__libc_init_array+0x24>
 8007238:	4d0b      	ldr	r5, [pc, #44]	@ (8007268 <__libc_init_array+0x40>)
 800723a:	4c0c      	ldr	r4, [pc, #48]	@ (800726c <__libc_init_array+0x44>)
 800723c:	f000 fa54 	bl	80076e8 <_init>
 8007240:	1b64      	subs	r4, r4, r5
 8007242:	10a4      	asrs	r4, r4, #2
 8007244:	2600      	movs	r6, #0
 8007246:	42a6      	cmp	r6, r4
 8007248:	d105      	bne.n	8007256 <__libc_init_array+0x2e>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007250:	4798      	blx	r3
 8007252:	3601      	adds	r6, #1
 8007254:	e7ee      	b.n	8007234 <__libc_init_array+0xc>
 8007256:	f855 3b04 	ldr.w	r3, [r5], #4
 800725a:	4798      	blx	r3
 800725c:	3601      	adds	r6, #1
 800725e:	e7f2      	b.n	8007246 <__libc_init_array+0x1e>
 8007260:	08007758 	.word	0x08007758
 8007264:	08007758 	.word	0x08007758
 8007268:	08007758 	.word	0x08007758
 800726c:	0800775c 	.word	0x0800775c

08007270 <__retarget_lock_init_recursive>:
 8007270:	4770      	bx	lr

08007272 <__retarget_lock_acquire_recursive>:
 8007272:	4770      	bx	lr

08007274 <__retarget_lock_release_recursive>:
 8007274:	4770      	bx	lr
	...

08007278 <_free_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4605      	mov	r5, r0
 800727c:	2900      	cmp	r1, #0
 800727e:	d041      	beq.n	8007304 <_free_r+0x8c>
 8007280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007284:	1f0c      	subs	r4, r1, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfb8      	it	lt
 800728a:	18e4      	addlt	r4, r4, r3
 800728c:	f000 f8e0 	bl	8007450 <__malloc_lock>
 8007290:	4a1d      	ldr	r2, [pc, #116]	@ (8007308 <_free_r+0x90>)
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	b933      	cbnz	r3, 80072a4 <_free_r+0x2c>
 8007296:	6063      	str	r3, [r4, #4]
 8007298:	6014      	str	r4, [r2, #0]
 800729a:	4628      	mov	r0, r5
 800729c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a0:	f000 b8dc 	b.w	800745c <__malloc_unlock>
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	d908      	bls.n	80072ba <_free_r+0x42>
 80072a8:	6820      	ldr	r0, [r4, #0]
 80072aa:	1821      	adds	r1, r4, r0
 80072ac:	428b      	cmp	r3, r1
 80072ae:	bf01      	itttt	eq
 80072b0:	6819      	ldreq	r1, [r3, #0]
 80072b2:	685b      	ldreq	r3, [r3, #4]
 80072b4:	1809      	addeq	r1, r1, r0
 80072b6:	6021      	streq	r1, [r4, #0]
 80072b8:	e7ed      	b.n	8007296 <_free_r+0x1e>
 80072ba:	461a      	mov	r2, r3
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	b10b      	cbz	r3, 80072c4 <_free_r+0x4c>
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d9fa      	bls.n	80072ba <_free_r+0x42>
 80072c4:	6811      	ldr	r1, [r2, #0]
 80072c6:	1850      	adds	r0, r2, r1
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d10b      	bne.n	80072e4 <_free_r+0x6c>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	4401      	add	r1, r0
 80072d0:	1850      	adds	r0, r2, r1
 80072d2:	4283      	cmp	r3, r0
 80072d4:	6011      	str	r1, [r2, #0]
 80072d6:	d1e0      	bne.n	800729a <_free_r+0x22>
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	6053      	str	r3, [r2, #4]
 80072de:	4408      	add	r0, r1
 80072e0:	6010      	str	r0, [r2, #0]
 80072e2:	e7da      	b.n	800729a <_free_r+0x22>
 80072e4:	d902      	bls.n	80072ec <_free_r+0x74>
 80072e6:	230c      	movs	r3, #12
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	e7d6      	b.n	800729a <_free_r+0x22>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	1821      	adds	r1, r4, r0
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf04      	itt	eq
 80072f4:	6819      	ldreq	r1, [r3, #0]
 80072f6:	685b      	ldreq	r3, [r3, #4]
 80072f8:	6063      	str	r3, [r4, #4]
 80072fa:	bf04      	itt	eq
 80072fc:	1809      	addeq	r1, r1, r0
 80072fe:	6021      	streq	r1, [r4, #0]
 8007300:	6054      	str	r4, [r2, #4]
 8007302:	e7ca      	b.n	800729a <_free_r+0x22>
 8007304:	bd38      	pop	{r3, r4, r5, pc}
 8007306:	bf00      	nop
 8007308:	200004e4 	.word	0x200004e4

0800730c <sbrk_aligned>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4e0f      	ldr	r6, [pc, #60]	@ (800734c <sbrk_aligned+0x40>)
 8007310:	460c      	mov	r4, r1
 8007312:	6831      	ldr	r1, [r6, #0]
 8007314:	4605      	mov	r5, r0
 8007316:	b911      	cbnz	r1, 800731e <sbrk_aligned+0x12>
 8007318:	f000 f9d6 	bl	80076c8 <_sbrk_r>
 800731c:	6030      	str	r0, [r6, #0]
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f9d1 	bl	80076c8 <_sbrk_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d103      	bne.n	8007332 <sbrk_aligned+0x26>
 800732a:	f04f 34ff 	mov.w	r4, #4294967295
 800732e:	4620      	mov	r0, r4
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	1cc4      	adds	r4, r0, #3
 8007334:	f024 0403 	bic.w	r4, r4, #3
 8007338:	42a0      	cmp	r0, r4
 800733a:	d0f8      	beq.n	800732e <sbrk_aligned+0x22>
 800733c:	1a21      	subs	r1, r4, r0
 800733e:	4628      	mov	r0, r5
 8007340:	f000 f9c2 	bl	80076c8 <_sbrk_r>
 8007344:	3001      	adds	r0, #1
 8007346:	d1f2      	bne.n	800732e <sbrk_aligned+0x22>
 8007348:	e7ef      	b.n	800732a <sbrk_aligned+0x1e>
 800734a:	bf00      	nop
 800734c:	200004e0 	.word	0x200004e0

08007350 <_malloc_r>:
 8007350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007354:	1ccd      	adds	r5, r1, #3
 8007356:	f025 0503 	bic.w	r5, r5, #3
 800735a:	3508      	adds	r5, #8
 800735c:	2d0c      	cmp	r5, #12
 800735e:	bf38      	it	cc
 8007360:	250c      	movcc	r5, #12
 8007362:	2d00      	cmp	r5, #0
 8007364:	4606      	mov	r6, r0
 8007366:	db01      	blt.n	800736c <_malloc_r+0x1c>
 8007368:	42a9      	cmp	r1, r5
 800736a:	d904      	bls.n	8007376 <_malloc_r+0x26>
 800736c:	230c      	movs	r3, #12
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	2000      	movs	r0, #0
 8007372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007376:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800744c <_malloc_r+0xfc>
 800737a:	f000 f869 	bl	8007450 <__malloc_lock>
 800737e:	f8d8 3000 	ldr.w	r3, [r8]
 8007382:	461c      	mov	r4, r3
 8007384:	bb44      	cbnz	r4, 80073d8 <_malloc_r+0x88>
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff ffbf 	bl	800730c <sbrk_aligned>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	4604      	mov	r4, r0
 8007392:	d158      	bne.n	8007446 <_malloc_r+0xf6>
 8007394:	f8d8 4000 	ldr.w	r4, [r8]
 8007398:	4627      	mov	r7, r4
 800739a:	2f00      	cmp	r7, #0
 800739c:	d143      	bne.n	8007426 <_malloc_r+0xd6>
 800739e:	2c00      	cmp	r4, #0
 80073a0:	d04b      	beq.n	800743a <_malloc_r+0xea>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	4639      	mov	r1, r7
 80073a6:	4630      	mov	r0, r6
 80073a8:	eb04 0903 	add.w	r9, r4, r3
 80073ac:	f000 f98c 	bl	80076c8 <_sbrk_r>
 80073b0:	4581      	cmp	r9, r0
 80073b2:	d142      	bne.n	800743a <_malloc_r+0xea>
 80073b4:	6821      	ldr	r1, [r4, #0]
 80073b6:	1a6d      	subs	r5, r5, r1
 80073b8:	4629      	mov	r1, r5
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7ff ffa6 	bl	800730c <sbrk_aligned>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d03a      	beq.n	800743a <_malloc_r+0xea>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	442b      	add	r3, r5
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	f8d8 3000 	ldr.w	r3, [r8]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	bb62      	cbnz	r2, 800742c <_malloc_r+0xdc>
 80073d2:	f8c8 7000 	str.w	r7, [r8]
 80073d6:	e00f      	b.n	80073f8 <_malloc_r+0xa8>
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	1b52      	subs	r2, r2, r5
 80073dc:	d420      	bmi.n	8007420 <_malloc_r+0xd0>
 80073de:	2a0b      	cmp	r2, #11
 80073e0:	d917      	bls.n	8007412 <_malloc_r+0xc2>
 80073e2:	1961      	adds	r1, r4, r5
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	6025      	str	r5, [r4, #0]
 80073e8:	bf18      	it	ne
 80073ea:	6059      	strne	r1, [r3, #4]
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	bf08      	it	eq
 80073f0:	f8c8 1000 	streq.w	r1, [r8]
 80073f4:	5162      	str	r2, [r4, r5]
 80073f6:	604b      	str	r3, [r1, #4]
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 f82f 	bl	800745c <__malloc_unlock>
 80073fe:	f104 000b 	add.w	r0, r4, #11
 8007402:	1d23      	adds	r3, r4, #4
 8007404:	f020 0007 	bic.w	r0, r0, #7
 8007408:	1ac2      	subs	r2, r0, r3
 800740a:	bf1c      	itt	ne
 800740c:	1a1b      	subne	r3, r3, r0
 800740e:	50a3      	strne	r3, [r4, r2]
 8007410:	e7af      	b.n	8007372 <_malloc_r+0x22>
 8007412:	6862      	ldr	r2, [r4, #4]
 8007414:	42a3      	cmp	r3, r4
 8007416:	bf0c      	ite	eq
 8007418:	f8c8 2000 	streq.w	r2, [r8]
 800741c:	605a      	strne	r2, [r3, #4]
 800741e:	e7eb      	b.n	80073f8 <_malloc_r+0xa8>
 8007420:	4623      	mov	r3, r4
 8007422:	6864      	ldr	r4, [r4, #4]
 8007424:	e7ae      	b.n	8007384 <_malloc_r+0x34>
 8007426:	463c      	mov	r4, r7
 8007428:	687f      	ldr	r7, [r7, #4]
 800742a:	e7b6      	b.n	800739a <_malloc_r+0x4a>
 800742c:	461a      	mov	r2, r3
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	42a3      	cmp	r3, r4
 8007432:	d1fb      	bne.n	800742c <_malloc_r+0xdc>
 8007434:	2300      	movs	r3, #0
 8007436:	6053      	str	r3, [r2, #4]
 8007438:	e7de      	b.n	80073f8 <_malloc_r+0xa8>
 800743a:	230c      	movs	r3, #12
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	4630      	mov	r0, r6
 8007440:	f000 f80c 	bl	800745c <__malloc_unlock>
 8007444:	e794      	b.n	8007370 <_malloc_r+0x20>
 8007446:	6005      	str	r5, [r0, #0]
 8007448:	e7d6      	b.n	80073f8 <_malloc_r+0xa8>
 800744a:	bf00      	nop
 800744c:	200004e4 	.word	0x200004e4

08007450 <__malloc_lock>:
 8007450:	4801      	ldr	r0, [pc, #4]	@ (8007458 <__malloc_lock+0x8>)
 8007452:	f7ff bf0e 	b.w	8007272 <__retarget_lock_acquire_recursive>
 8007456:	bf00      	nop
 8007458:	200004dc 	.word	0x200004dc

0800745c <__malloc_unlock>:
 800745c:	4801      	ldr	r0, [pc, #4]	@ (8007464 <__malloc_unlock+0x8>)
 800745e:	f7ff bf09 	b.w	8007274 <__retarget_lock_release_recursive>
 8007462:	bf00      	nop
 8007464:	200004dc 	.word	0x200004dc

08007468 <__sflush_r>:
 8007468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	0716      	lsls	r6, r2, #28
 8007472:	4605      	mov	r5, r0
 8007474:	460c      	mov	r4, r1
 8007476:	d454      	bmi.n	8007522 <__sflush_r+0xba>
 8007478:	684b      	ldr	r3, [r1, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	dc02      	bgt.n	8007484 <__sflush_r+0x1c>
 800747e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	dd48      	ble.n	8007516 <__sflush_r+0xae>
 8007484:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007486:	2e00      	cmp	r6, #0
 8007488:	d045      	beq.n	8007516 <__sflush_r+0xae>
 800748a:	2300      	movs	r3, #0
 800748c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007490:	682f      	ldr	r7, [r5, #0]
 8007492:	6a21      	ldr	r1, [r4, #32]
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	d030      	beq.n	80074fa <__sflush_r+0x92>
 8007498:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0759      	lsls	r1, r3, #29
 800749e:	d505      	bpl.n	80074ac <__sflush_r+0x44>
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074a6:	b10b      	cbz	r3, 80074ac <__sflush_r+0x44>
 80074a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b0      	blx	r6
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	d106      	bne.n	80074ca <__sflush_r+0x62>
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	291d      	cmp	r1, #29
 80074c0:	d82b      	bhi.n	800751a <__sflush_r+0xb2>
 80074c2:	4a2a      	ldr	r2, [pc, #168]	@ (800756c <__sflush_r+0x104>)
 80074c4:	410a      	asrs	r2, r1
 80074c6:	07d6      	lsls	r6, r2, #31
 80074c8:	d427      	bmi.n	800751a <__sflush_r+0xb2>
 80074ca:	2200      	movs	r2, #0
 80074cc:	6062      	str	r2, [r4, #4]
 80074ce:	04d9      	lsls	r1, r3, #19
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	6022      	str	r2, [r4, #0]
 80074d4:	d504      	bpl.n	80074e0 <__sflush_r+0x78>
 80074d6:	1c42      	adds	r2, r0, #1
 80074d8:	d101      	bne.n	80074de <__sflush_r+0x76>
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	b903      	cbnz	r3, 80074e0 <__sflush_r+0x78>
 80074de:	6560      	str	r0, [r4, #84]	@ 0x54
 80074e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	b1b9      	cbz	r1, 8007516 <__sflush_r+0xae>
 80074e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d002      	beq.n	80074f4 <__sflush_r+0x8c>
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7ff fec2 	bl	8007278 <_free_r>
 80074f4:	2300      	movs	r3, #0
 80074f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80074f8:	e00d      	b.n	8007516 <__sflush_r+0xae>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	4602      	mov	r2, r0
 8007502:	1c50      	adds	r0, r2, #1
 8007504:	d1c9      	bne.n	800749a <__sflush_r+0x32>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0c6      	beq.n	800749a <__sflush_r+0x32>
 800750c:	2b1d      	cmp	r3, #29
 800750e:	d001      	beq.n	8007514 <__sflush_r+0xac>
 8007510:	2b16      	cmp	r3, #22
 8007512:	d11e      	bne.n	8007552 <__sflush_r+0xea>
 8007514:	602f      	str	r7, [r5, #0]
 8007516:	2000      	movs	r0, #0
 8007518:	e022      	b.n	8007560 <__sflush_r+0xf8>
 800751a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751e:	b21b      	sxth	r3, r3
 8007520:	e01b      	b.n	800755a <__sflush_r+0xf2>
 8007522:	690f      	ldr	r7, [r1, #16]
 8007524:	2f00      	cmp	r7, #0
 8007526:	d0f6      	beq.n	8007516 <__sflush_r+0xae>
 8007528:	0793      	lsls	r3, r2, #30
 800752a:	680e      	ldr	r6, [r1, #0]
 800752c:	bf08      	it	eq
 800752e:	694b      	ldreq	r3, [r1, #20]
 8007530:	600f      	str	r7, [r1, #0]
 8007532:	bf18      	it	ne
 8007534:	2300      	movne	r3, #0
 8007536:	eba6 0807 	sub.w	r8, r6, r7
 800753a:	608b      	str	r3, [r1, #8]
 800753c:	f1b8 0f00 	cmp.w	r8, #0
 8007540:	dde9      	ble.n	8007516 <__sflush_r+0xae>
 8007542:	6a21      	ldr	r1, [r4, #32]
 8007544:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007546:	4643      	mov	r3, r8
 8007548:	463a      	mov	r2, r7
 800754a:	4628      	mov	r0, r5
 800754c:	47b0      	blx	r6
 800754e:	2800      	cmp	r0, #0
 8007550:	dc08      	bgt.n	8007564 <__sflush_r+0xfc>
 8007552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007564:	4407      	add	r7, r0
 8007566:	eba8 0800 	sub.w	r8, r8, r0
 800756a:	e7e7      	b.n	800753c <__sflush_r+0xd4>
 800756c:	dfbffffe 	.word	0xdfbffffe

08007570 <_fflush_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	690b      	ldr	r3, [r1, #16]
 8007574:	4605      	mov	r5, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b913      	cbnz	r3, 8007580 <_fflush_r+0x10>
 800757a:	2500      	movs	r5, #0
 800757c:	4628      	mov	r0, r5
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	b118      	cbz	r0, 800758a <_fflush_r+0x1a>
 8007582:	6a03      	ldr	r3, [r0, #32]
 8007584:	b90b      	cbnz	r3, 800758a <_fflush_r+0x1a>
 8007586:	f7ff fc8f 	bl	8006ea8 <__sinit>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f3      	beq.n	800757a <_fflush_r+0xa>
 8007592:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d404      	bmi.n	80075a2 <_fflush_r+0x32>
 8007598:	0599      	lsls	r1, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_fflush_r+0x32>
 800759c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800759e:	f7ff fe68 	bl	8007272 <__retarget_lock_acquire_recursive>
 80075a2:	4628      	mov	r0, r5
 80075a4:	4621      	mov	r1, r4
 80075a6:	f7ff ff5f 	bl	8007468 <__sflush_r>
 80075aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075ac:	07da      	lsls	r2, r3, #31
 80075ae:	4605      	mov	r5, r0
 80075b0:	d4e4      	bmi.n	800757c <_fflush_r+0xc>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	d4e1      	bmi.n	800757c <_fflush_r+0xc>
 80075b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ba:	f7ff fe5b 	bl	8007274 <__retarget_lock_release_recursive>
 80075be:	e7dd      	b.n	800757c <_fflush_r+0xc>

080075c0 <__swhatbuf_r>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	460c      	mov	r4, r1
 80075c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c8:	2900      	cmp	r1, #0
 80075ca:	b096      	sub	sp, #88	@ 0x58
 80075cc:	4615      	mov	r5, r2
 80075ce:	461e      	mov	r6, r3
 80075d0:	da0d      	bge.n	80075ee <__swhatbuf_r+0x2e>
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075d8:	f04f 0100 	mov.w	r1, #0
 80075dc:	bf14      	ite	ne
 80075de:	2340      	movne	r3, #64	@ 0x40
 80075e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075e4:	2000      	movs	r0, #0
 80075e6:	6031      	str	r1, [r6, #0]
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	b016      	add	sp, #88	@ 0x58
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	466a      	mov	r2, sp
 80075f0:	f000 f848 	bl	8007684 <_fstat_r>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	dbec      	blt.n	80075d2 <__swhatbuf_r+0x12>
 80075f8:	9901      	ldr	r1, [sp, #4]
 80075fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007602:	4259      	negs	r1, r3
 8007604:	4159      	adcs	r1, r3
 8007606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800760a:	e7eb      	b.n	80075e4 <__swhatbuf_r+0x24>

0800760c <__smakebuf_r>:
 800760c:	898b      	ldrh	r3, [r1, #12]
 800760e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007610:	079d      	lsls	r5, r3, #30
 8007612:	4606      	mov	r6, r0
 8007614:	460c      	mov	r4, r1
 8007616:	d507      	bpl.n	8007628 <__smakebuf_r+0x1c>
 8007618:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	2301      	movs	r3, #1
 8007622:	6163      	str	r3, [r4, #20]
 8007624:	b003      	add	sp, #12
 8007626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007628:	ab01      	add	r3, sp, #4
 800762a:	466a      	mov	r2, sp
 800762c:	f7ff ffc8 	bl	80075c0 <__swhatbuf_r>
 8007630:	9f00      	ldr	r7, [sp, #0]
 8007632:	4605      	mov	r5, r0
 8007634:	4639      	mov	r1, r7
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff fe8a 	bl	8007350 <_malloc_r>
 800763c:	b948      	cbnz	r0, 8007652 <__smakebuf_r+0x46>
 800763e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007642:	059a      	lsls	r2, r3, #22
 8007644:	d4ee      	bmi.n	8007624 <__smakebuf_r+0x18>
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	f043 0302 	orr.w	r3, r3, #2
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	e7e2      	b.n	8007618 <__smakebuf_r+0xc>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	6020      	str	r0, [r4, #0]
 8007656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007662:	b15b      	cbz	r3, 800767c <__smakebuf_r+0x70>
 8007664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f81d 	bl	80076a8 <_isatty_r>
 800766e:	b128      	cbz	r0, 800767c <__smakebuf_r+0x70>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f023 0303 	bic.w	r3, r3, #3
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	431d      	orrs	r5, r3
 8007680:	81a5      	strh	r5, [r4, #12]
 8007682:	e7cf      	b.n	8007624 <__smakebuf_r+0x18>

08007684 <_fstat_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	@ (80076a4 <_fstat_r+0x20>)
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	f7f9 fde2 	bl	800125a <_fstat>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	d102      	bne.n	80076a0 <_fstat_r+0x1c>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	b103      	cbz	r3, 80076a0 <_fstat_r+0x1c>
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	200004d8 	.word	0x200004d8

080076a8 <_isatty_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d06      	ldr	r5, [pc, #24]	@ (80076c4 <_isatty_r+0x1c>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	602b      	str	r3, [r5, #0]
 80076b4:	f7f9 fde1 	bl	800127a <_isatty>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_isatty_r+0x1a>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_isatty_r+0x1a>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	200004d8 	.word	0x200004d8

080076c8 <_sbrk_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d06      	ldr	r5, [pc, #24]	@ (80076e4 <_sbrk_r+0x1c>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	f7f9 fdea 	bl	80012ac <_sbrk>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_sbrk_r+0x1a>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_sbrk_r+0x1a>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	200004d8 	.word	0x200004d8

080076e8 <_init>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr

080076f4 <_fini>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	bf00      	nop
 80076f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fa:	bc08      	pop	{r3}
 80076fc:	469e      	mov	lr, r3
 80076fe:	4770      	bx	lr
